
Diferential.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039dc  080039dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039dc  080039dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039dc  080039dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e0  080039e0  000139e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  080039f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080039f0  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee10  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b67  00000000  00000000  0002ee4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f18  00000000  00000000  000309b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  000318d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e7a4  00000000  00000000  00032710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b052  00000000  00000000  00050eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d00ae  00000000  00000000  0005bf06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012bfb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  0012c030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080039b4 	.word	0x080039b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080039b4 	.word	0x080039b4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb59 	bl	80008d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f814 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f94c 	bl	80004c0 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000228:	f000 f878 	bl	800031c <MX_ADC2_Init>
  MX_TIM1_Init();
 800022c:	f000 f8de 	bl	80003ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Pos_pointer = Init_State;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <main+0x2c>)
 8000232:	4a05      	ldr	r2, [pc, #20]	; (8000248 <main+0x30>)
 8000234:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  (*Pos_pointer)();
 8000236:	4b03      	ldr	r3, [pc, #12]	; (8000244 <main+0x2c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4798      	blx	r3

	  	  HAL_Delay(20);
 800023c:	2014      	movs	r0, #20
 800023e:	f000 fbb9 	bl	80009b4 <HAL_Delay>
	  (*Pos_pointer)();
 8000242:	e7f8      	b.n	8000236 <main+0x1e>
 8000244:	200000e0 	.word	0x200000e0
 8000248:	0800061d 	.word	0x0800061d

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b0a4      	sub	sp, #144	; 0x90
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000256:	2238      	movs	r2, #56	; 0x38
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fba2 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	463b      	mov	r3, r7
 8000272:	2244      	movs	r2, #68	; 0x44
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fb94 	bl	80039a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800027c:	2000      	movs	r0, #0
 800027e:	f001 fdfd 	bl	8001e7c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000282:	2302      	movs	r3, #2
 8000284:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800028a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	2340      	movs	r3, #64	; 0x40
 800028e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000294:	2302      	movs	r3, #2
 8000296:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000298:	2304      	movs	r3, #4
 800029a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800029c:	2355      	movs	r3, #85	; 0x55
 800029e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a8:	2302      	movs	r3, #2
 80002aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fe93 	bl	8001fe4 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80002c4:	f000 f9c2 	bl	800064c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2303      	movs	r3, #3
 80002ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80002d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80002d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80002da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80002de:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002e4:	2104      	movs	r1, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 f994 	bl	8002614 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002f2:	f000 f9ab 	bl	800064c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80002f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002fa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80002fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000300:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	463b      	mov	r3, r7
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fb69 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000310:	f000 f99c 	bl	800064c <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3790      	adds	r7, #144	; 0x90
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	463b      	mov	r3, r7
 8000324:	2220      	movs	r2, #32
 8000326:	2100      	movs	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f003 fb3b 	bl	80039a4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800032e:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000330:	4a2b      	ldr	r2, [pc, #172]	; (80003e0 <MX_ADC2_Init+0xc4>)
 8000332:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000334:	4b29      	ldr	r3, [pc, #164]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000336:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800033a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_ADC2_Init+0xc0>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000342:	4b26      	ldr	r3, [pc, #152]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_ADC2_Init+0xc0>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000356:	2204      	movs	r2, #4
 8000358:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <MX_ADC2_Init+0xc0>)
 800035c:	2200      	movs	r2, #0
 800035e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000362:	2200      	movs	r2, #0
 8000364:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000368:	2201      	movs	r2, #1
 800036a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_ADC2_Init+0xc0>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000376:	2200      	movs	r2, #0
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_ADC2_Init+0xc0>)
 800037c:	2200      	movs	r2, #0
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000382:	2200      	movs	r2, #0
 8000384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_ADC2_Init+0xc0>)
 800038a:	2200      	movs	r2, #0
 800038c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000396:	4811      	ldr	r0, [pc, #68]	; (80003dc <MX_ADC2_Init+0xc0>)
 8000398:	f000 fd04 	bl	8000da4 <HAL_ADC_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80003a2:	f000 f953 	bl	800064c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_ADC2_Init+0xc8>)
 80003a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003aa:	2306      	movs	r3, #6
 80003ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <MX_ADC2_Init+0xcc>)
 80003b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b6:	2304      	movs	r3, #4
 80003b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003be:	463b      	mov	r3, r7
 80003c0:	4619      	mov	r1, r3
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <MX_ADC2_Init+0xc0>)
 80003c4:	f000 fe76 	bl	80010b4 <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80003ce:	f000 f93d 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	3720      	adds	r7, #32
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000028 	.word	0x20000028
 80003e0:	50000100 	.word	0x50000100
 80003e4:	04300002 	.word	0x04300002
 80003e8:	407f0000 	.word	0x407f0000

080003ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b094      	sub	sp, #80	; 0x50
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040c:	463b      	mov	r3, r7
 800040e:	2234      	movs	r2, #52	; 0x34
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fac6 	bl	80039a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_TIM1_Init+0xcc>)
 800041a:	4a28      	ldr	r2, [pc, #160]	; (80004bc <MX_TIM1_Init+0xd0>)
 800041c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21250;
 800041e:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_TIM1_Init+0xcc>)
 8000420:	f245 3202 	movw	r2, #21250	; 0x5302
 8000424:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_TIM1_Init+0xcc>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_TIM1_Init+0xcc>)
 800042e:	2232      	movs	r2, #50	; 0x32
 8000430:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_TIM1_Init+0xcc>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_TIM1_Init+0xcc>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_TIM1_Init+0xcc>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000444:	481c      	ldr	r0, [pc, #112]	; (80004b8 <MX_TIM1_Init+0xcc>)
 8000446:	f002 fcb9 	bl	8002dbc <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000450:	f000 f8fc 	bl	800064c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000458:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800045a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800045e:	4619      	mov	r1, r3
 8000460:	4815      	ldr	r0, [pc, #84]	; (80004b8 <MX_TIM1_Init+0xcc>)
 8000462:	f002 feed 	bl	8003240 <HAL_TIM_ConfigClockSource>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800046c:	f000 f8ee 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000474:	2300      	movs	r3, #0
 8000476:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000478:	2300      	movs	r3, #0
 800047a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800047c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000480:	4619      	mov	r1, r3
 8000482:	480d      	ldr	r0, [pc, #52]	; (80004b8 <MX_TIM1_Init+0xcc>)
 8000484:	f003 f902 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800048e:	f000 f8dd 	bl	800064c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000496:	2300      	movs	r3, #0
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800049a:	463b      	mov	r3, r7
 800049c:	4619      	mov	r1, r3
 800049e:	4806      	ldr	r0, [pc, #24]	; (80004b8 <MX_TIM1_Init+0xcc>)
 80004a0:	f003 f976 	bl	8003790 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80004aa:	f000 f8cf 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	3750      	adds	r7, #80	; 0x50
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000094 	.word	0x20000094
 80004bc:	40012c00 	.word	0x40012c00

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b35      	ldr	r3, [pc, #212]	; (80005ac <MX_GPIO_Init+0xec>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a34      	ldr	r2, [pc, #208]	; (80005ac <MX_GPIO_Init+0xec>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b32      	ldr	r3, [pc, #200]	; (80005ac <MX_GPIO_Init+0xec>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_GPIO_Init+0xec>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a2e      	ldr	r2, [pc, #184]	; (80005ac <MX_GPIO_Init+0xec>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_GPIO_Init+0xec>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BrakeRangesOk_Pin|Buzzer_Output_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7140 	mov.w	r1, #768	; 0x300
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f001 fc6a 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_2_Pin|LED_1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800051a:	4825      	ldr	r0, [pc, #148]	; (80005b0 <MX_GPIO_Init+0xf0>)
 800051c:	f001 fc64 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BrakeSig_input_Pin */
  GPIO_InitStruct.Pin = BrakeSig_input_Pin;
 8000520:	2304      	movs	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000524:	2303      	movs	r3, #3
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BrakeSig_input_GPIO_Port, &GPIO_InitStruct);
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	4619      	mov	r1, r3
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f001 fabd 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTD_Button_Pin */
  GPIO_InitStruct.Pin = RTD_Button_Pin;
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <MX_GPIO_Init+0xf4>)
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RTD_Button_GPIO_Port, &GPIO_InitStruct);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4619      	mov	r1, r3
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f001 fab0 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BrakeRangesOk_Pin Buzzer_Output_Pin */
  GPIO_InitStruct.Pin = BrakeRangesOk_Pin|Buzzer_Output_Pin;
 8000554:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 faa0 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_2_Pin LED_1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_2_Pin|LED_1_Pin|LD2_Pin;
 8000574:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <MX_GPIO_Init+0xf0>)
 800058e:	f001 fa91 	bl	8001ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2017      	movs	r0, #23
 8000598:	f001 fa57 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800059c:	2017      	movs	r0, #23
 800059e:	f001 fa6e 	bl	8001a7e <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48000400 	.word	0x48000400
 80005b4:	10210000 	.word	0x10210000

080005b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//Detects Ready to drive button interrupt (GPIO_PIN_7)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_7))
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b80      	cmp	r3, #128	; 0x80
 80005c6:	d103      	bne.n	80005d0 <HAL_GPIO_EXTI_Callback+0x18>
	{
			HAL_TIM_Base_Start_IT(&htim1);
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <HAL_GPIO_EXTI_Callback+0x24>)
 80005ca:	f002 fc4f 	bl	8002e6c <HAL_TIM_Base_Start_IT>

		} else{
			__NOP();

		}
}
 80005ce:	e000      	b.n	80005d2 <HAL_GPIO_EXTI_Callback+0x1a>
			__NOP();
 80005d0:	bf00      	nop
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000094 	.word	0x20000094

080005e0 <Debouncing_Check>:

void Debouncing_Check()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  //If Ready to Drive button and brake remain pressed..Set the Ready to Drive Mode flag to True.

  if((HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == GPIO_PIN_RESET))
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 fbe5 	bl	8001db8 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d108      	bne.n	8000606 <Debouncing_Check+0x26>
	{
	  Pos_pointer = Error_Handler;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <Debouncing_Check+0x30>)
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <Debouncing_Check+0x34>)
 80005f8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <Debouncing_Check+0x38>)
 8000600:	f001 fbf2 	bl	8001de8 <HAL_GPIO_WritePin>
	} else{

		(*Pos_pointer)();
	}
}
 8000604:	e002      	b.n	800060c <Debouncing_Check+0x2c>
		(*Pos_pointer)();
 8000606:	4b02      	ldr	r3, [pc, #8]	; (8000610 <Debouncing_Check+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4798      	blx	r3
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000e0 	.word	0x200000e0
 8000614:	0800064d 	.word	0x0800064d
 8000618:	48000400 	.word	0x48000400

0800061c <Init_State>:

void Init_State(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <Init_State+0x18>)
 8000624:	f001 fbf8 	bl	8001e18 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062c:	f000 f9c2 	bl	80009b4 <HAL_Delay>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	48000400 	.word	0x48000400

08000638 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
	HAL_Delay(1000);
}

HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

    Debouncing_Check();
 8000640:	f7ff ffce 	bl	80005e0 <Debouncing_Check>


}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000652:	2120      	movs	r1, #32
 8000654:	4801      	ldr	r0, [pc, #4]	; (800065c <Error_Handler+0x10>)
 8000656:	f001 fbdf 	bl	8001e18 <HAL_GPIO_TogglePin>
 800065a:	e7fa      	b.n	8000652 <Error_Handler+0x6>
 800065c:	48000400 	.word	0x48000400

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x44>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_MspInit+0x44>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6613      	str	r3, [r2, #96]	; 0x60
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_MspInit+0x44>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_MspInit+0x44>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <HAL_MspInit+0x44>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	6593      	str	r3, [r2, #88]	; 0x58
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_MspInit+0x44>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000696:	f001 fc95 	bl	8001fc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a15      	ldr	r2, [pc, #84]	; (800071c <HAL_ADC_MspInit+0x74>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d124      	bne.n	8000714 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_ADC_MspInit+0x78>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_ADC_MspInit+0x78>)
 80006d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_ADC_MspInit+0x78>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_ADC_MspInit+0x78>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_ADC_MspInit+0x78>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_ADC_MspInit+0x78>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = APPS_1_Pin|APPS_2_Pin;
 80006fa:	2303      	movs	r3, #3
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fe:	2303      	movs	r3, #3
 8000700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f001 f9d0 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	50000100 	.word	0x50000100
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a19      	ldr	r2, [pc, #100]	; (8000798 <HAL_TIM_Base_MspInit+0x74>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d12b      	bne.n	800078e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <HAL_TIM_Base_MspInit+0x78>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <HAL_TIM_Base_MspInit+0x78>)
 800073c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000740:	6613      	str	r3, [r2, #96]	; 0x60
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <HAL_TIM_Base_MspInit+0x78>)
 8000744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2018      	movs	r0, #24
 8000754:	f001 f979 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000758:	2018      	movs	r0, #24
 800075a:	f001 f990 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2019      	movs	r0, #25
 8000764:	f001 f971 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000768:	2019      	movs	r0, #25
 800076a:	f001 f988 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	201a      	movs	r0, #26
 8000774:	f001 f969 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000778:	201a      	movs	r0, #26
 800077a:	f001 f980 	bl	8001a7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	201b      	movs	r0, #27
 8000784:	f001 f961 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000788:	201b      	movs	r0, #27
 800078a:	f001 f978 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40012c00 	.word	0x40012c00
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f8c4 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80007f8:	2080      	movs	r0, #128	; 0x80
 80007fa:	f001 fb27 	bl	8001e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800080a:	f002 fb99 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000094 	.word	0x20000094

08000818 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800081e:	f002 fb8f 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000094 	.word	0x20000094

0800082c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000832:	f002 fb85 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000094 	.word	0x20000094

08000840 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <TIM1_CC_IRQHandler+0x10>)
 8000846:	f002 fb7b 	bl	8002f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000094 	.word	0x20000094

08000854 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <SystemInit+0x28>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <SystemInit+0x28>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <SystemInit+0x28>)
 800086a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086e:	609a      	str	r2, [r3, #8]
#endif
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490e      	ldr	r1, [pc, #56]	; (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0b      	ldr	r4, [pc, #44]	; (80008cc <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008aa:	f7ff ffd3 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ae:	f003 f855 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008b2:	f7ff fcb1 	bl	8000218 <main>

080008b6 <LoopForever>:

LoopForever:
    b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c4:	080039e4 	.word	0x080039e4
  ldr r2, =_sbss
 80008c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008cc:	200000e8 	.word	0x200000e8

080008d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_2_IRQHandler>

080008d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d8:	2300      	movs	r3, #0
 80008da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f001 f8a9 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 f80e 	bl	8000904 <HAL_InitTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	e001      	b.n	80008f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f4:	f7ff feb4 	bl	8000660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f8:	79fb      	ldrb	r3, [r7, #7]

}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_InitTick+0x68>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d022      	beq.n	800095e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_InitTick+0x6c>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_InitTick+0x68>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000924:	fbb1 f3f3 	udiv	r3, r1, r3
 8000928:	fbb2 f3f3 	udiv	r3, r2, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f8b4 	bl	8001a9a <HAL_SYSTICK_Config>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10f      	bne.n	8000958 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b0f      	cmp	r3, #15
 800093c:	d809      	bhi.n	8000952 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093e:	2200      	movs	r2, #0
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	f04f 30ff 	mov.w	r0, #4294967295
 8000946:	f001 f880 	bl	8001a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <HAL_InitTick+0x70>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	e007      	b.n	8000962 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e004      	b.n	8000962 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e001      	b.n	8000962 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000008 	.word	0x20000008
 8000970:	20000000 	.word	0x20000000
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x1c>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x20>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4413      	add	r3, r2
 8000986:	4a03      	ldr	r2, [pc, #12]	; (8000994 <HAL_IncTick+0x1c>)
 8000988:	6013      	str	r3, [r2, #0]
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	200000e4 	.word	0x200000e4
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000e4 	.word	0x200000e4

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff ffee 	bl	800099c <HAL_GetTick>
 80009c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009cc:	d004      	beq.n	80009d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_Delay+0x40>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d8:	bf00      	nop
 80009da:	f7ff ffdf 	bl	800099c <HAL_GetTick>
 80009de:	4602      	mov	r2, r0
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d8f7      	bhi.n	80009da <HAL_Delay+0x26>
  {
  }
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008

080009f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	609a      	str	r2, [r3, #8]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	609a      	str	r2, [r3, #8]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3360      	adds	r3, #96	; 0x60
 8000a72:	461a      	mov	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <LL_ADC_SetOffset+0x44>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000a98:	bf00      	nop
 8000a9a:	371c      	adds	r7, #28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	03fff000 	.word	0x03fff000

08000aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3360      	adds	r3, #96	; 0x60
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3360      	adds	r3, #96	; 0x60
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b087      	sub	sp, #28
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3360      	adds	r3, #96	; 0x60
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000b34:	bf00      	nop
 8000b36:	371c      	adds	r7, #28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3360      	adds	r3, #96	; 0x60
 8000b50:	461a      	mov	r2, r3
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	431a      	orrs	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000b6a:	bf00      	nop
 8000b6c:	371c      	adds	r7, #28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	615a      	str	r2, [r3, #20]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3330      	adds	r3, #48	; 0x30
 8000bac:	461a      	mov	r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	211f      	movs	r1, #31
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	401a      	ands	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	0e9b      	lsrs	r3, r3, #26
 8000bd4:	f003 011f 	and.w	r1, r3, #31
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f003 031f 	and.w	r3, r3, #31
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	431a      	orrs	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000be8:	bf00      	nop
 8000bea:	371c      	adds	r7, #28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3314      	adds	r3, #20
 8000c04:	461a      	mov	r2, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	0e5b      	lsrs	r3, r3, #25
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	4413      	add	r3, r2
 8000c12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	0d1b      	lsrs	r3, r3, #20
 8000c1c:	f003 031f 	and.w	r3, r3, #31
 8000c20:	2107      	movs	r1, #7
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	401a      	ands	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	0d1b      	lsrs	r3, r3, #20
 8000c2e:	f003 031f 	and.w	r3, r3, #31
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c3e:	bf00      	nop
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0318 	and.w	r3, r3, #24
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c70:	40d9      	lsrs	r1, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	400b      	ands	r3, r1
 8000c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	0007ffff 	.word	0x0007ffff

08000c94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	6093      	str	r3, [r2, #8]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ccc:	d101      	bne.n	8000cd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d1c:	d101      	bne.n	8000d22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d101      	bne.n	8000d48 <LL_ADC_IsEnabled+0x18>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <LL_ADC_IsEnabled+0x1a>
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d101      	bne.n	8000d6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d101      	bne.n	8000d94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e16b      	b.n	8001096 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fc6b 	bl	80006a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff67 	bl	8000cb8 <LL_ADC_IsDeepPowerDownEnabled>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d004      	beq.n	8000dfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff4d 	bl	8000c94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff82 	bl	8000d08 <LL_ADC_IsInternalRegulatorEnabled>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d113      	bne.n	8000e32 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff66 	bl	8000ce0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e14:	4ba2      	ldr	r3, [pc, #648]	; (80010a0 <HAL_ADC_Init+0x2fc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	099b      	lsrs	r3, r3, #6
 8000e1a:	4aa2      	ldr	r2, [pc, #648]	; (80010a4 <HAL_ADC_Init+0x300>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	099b      	lsrs	r3, r3, #6
 8000e22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e24:	e002      	b.n	8000e2c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff66 	bl	8000d08 <LL_ADC_IsInternalRegulatorEnabled>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10d      	bne.n	8000e5e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e46:	f043 0210 	orr.w	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff77 	bl	8000d56 <LL_ADC_REG_IsConversionOngoing>
 8000e68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 8106 	bne.w	8001084 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 8102 	bne.w	8001084 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e88:	f043 0202 	orr.w	r2, r3, #2
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff4b 	bl	8000d30 <LL_ADC_IsEnabled>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d111      	bne.n	8000ec4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ea0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ea4:	f7ff ff44 	bl	8000d30 <LL_ADC_IsEnabled>
 8000ea8:	4604      	mov	r4, r0
 8000eaa:	487f      	ldr	r0, [pc, #508]	; (80010a8 <HAL_ADC_Init+0x304>)
 8000eac:	f7ff ff40 	bl	8000d30 <LL_ADC_IsEnabled>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4323      	orrs	r3, r4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d105      	bne.n	8000ec4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	487b      	ldr	r0, [pc, #492]	; (80010ac <HAL_ADC_Init+0x308>)
 8000ec0:	f7ff fd9a 	bl	80009f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f5b      	ldrb	r3, [r3, #29]
 8000ec8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ece:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000ed4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000eda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ee2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d106      	bne.n	8000f00 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	045b      	lsls	r3, r3, #17
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d009      	beq.n	8000f1c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <HAL_ADC_Init+0x30c>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff03 	bl	8000d56 <LL_ADC_REG_IsConversionOngoing>
 8000f50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff10 	bl	8000d7c <LL_ADC_INJ_IsConversionOngoing>
 8000f5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d16d      	bne.n	8001040 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d16a      	bne.n	8001040 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f6e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f76:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f86:	f023 0302 	bic.w	r3, r3, #2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	6812      	ldr	r2, [r2, #0]
 8000f8e:	69b9      	ldr	r1, [r7, #24]
 8000f90:	430b      	orrs	r3, r1
 8000f92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d017      	beq.n	8000fcc <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000faa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6911      	ldr	r1, [r2, #16]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8000fca:	e013      	b.n	8000ff4 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ff0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d118      	bne.n	8001030 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001014:	4311      	orrs	r1, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800101a:	4311      	orrs	r1, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001020:	430a      	orrs	r2, r1
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0201 	orr.w	r2, r2, #1
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	e007      	b.n	8001040 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	691a      	ldr	r2, [r3, #16]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10c      	bne.n	8001062 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f023 010f 	bic.w	r1, r3, #15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
 8001060:	e007      	b.n	8001072 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 020f 	bic.w	r2, r2, #15
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	65da      	str	r2, [r3, #92]	; 0x5c
 8001082:	e007      	b.n	8001094 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	f043 0210 	orr.w	r2, r3, #16
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001094:	7ffb      	ldrb	r3, [r7, #31]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000
 80010a4:	053e2d63 	.word	0x053e2d63
 80010a8:	50000100 	.word	0x50000100
 80010ac:	50000300 	.word	0x50000300
 80010b0:	fff04007 	.word	0xfff04007

080010b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0b6      	sub	sp, #216	; 0xd8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_ConfigChannel+0x22>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e3c7      	b.n	8001866 <HAL_ADC_ConfigChannel+0x7b2>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe37 	bl	8000d56 <LL_ADC_REG_IsConversionOngoing>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 83ac 	bne.w	8001848 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6859      	ldr	r1, [r3, #4]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	f7ff fd4d 	bl	8000b9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fe25 	bl	8000d56 <LL_ADC_REG_IsConversionOngoing>
 800110c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe31 	bl	8000d7c <LL_ADC_INJ_IsConversionOngoing>
 800111a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800111e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 81d9 	bne.w	80014da <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800112c:	2b00      	cmp	r3, #0
 800112e:	f040 81d4 	bne.w	80014da <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800113a:	d10f      	bne.n	800115c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd54 	bl	8000bf4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fd0e 	bl	8000b76 <LL_ADC_SetSamplingTimeCommonConfig>
 800115a:	e00e      	b.n	800117a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	461a      	mov	r2, r3
 800116a:	f7ff fd43 	bl	8000bf4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fcfe 	bl	8000b76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d022      	beq.n	80011e2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6919      	ldr	r1, [r3, #16]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80011ac:	f7ff fc58 	bl	8000a60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6919      	ldr	r1, [r3, #16]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	461a      	mov	r2, r3
 80011be:	f7ff fca4 	bl	8000b0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	6919      	ldr	r1, [r3, #16]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	7f1b      	ldrb	r3, [r3, #28]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d102      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x124>
 80011d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d6:	e000      	b.n	80011da <HAL_ADC_ConfigChannel+0x126>
 80011d8:	2300      	movs	r3, #0
 80011da:	461a      	mov	r2, r3
 80011dc:	f7ff fcb0 	bl	8000b40 <LL_ADC_SetOffsetSaturation>
 80011e0:	e17b      	b.n	80014da <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fc5d 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10a      	bne.n	800120e <HAL_ADC_ConfigChannel+0x15a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fc52 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	0e9b      	lsrs	r3, r3, #26
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	e01e      	b.n	800124c <HAL_ADC_ConfigChannel+0x198>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fc47 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800122c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800123c:	2320      	movs	r3, #32
 800123e:	e004      	b.n	800124a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1b0>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0e9b      	lsrs	r3, r3, #26
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	e018      	b.n	8001296 <HAL_ADC_ConfigChannel+0x1e2>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800127c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001280:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001288:	2320      	movs	r3, #32
 800128a:	e004      	b.n	8001296 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800128c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	429a      	cmp	r2, r3
 8001298:	d106      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fc16 	bl	8000ad4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fbfa 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10a      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x220>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2101      	movs	r1, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fbef 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	0e9b      	lsrs	r3, r3, #26
 80012ce:	f003 021f 	and.w	r2, r3, #31
 80012d2:	e01e      	b.n	8001312 <HAL_ADC_ConfigChannel+0x25e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fbe4 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001302:	2320      	movs	r3, #32
 8001304:	e004      	b.n	8001310 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_ADC_ConfigChannel+0x276>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0e9b      	lsrs	r3, r3, #26
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	e018      	b.n	800135c <HAL_ADC_ConfigChannel+0x2a8>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800133e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001346:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800134e:	2320      	movs	r3, #32
 8001350:	e004      	b.n	800135c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	429a      	cmp	r2, r3
 800135e:	d106      	bne.n	800136e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2200      	movs	r2, #0
 8001366:	2101      	movs	r1, #1
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fbb3 	bl	8000ad4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2102      	movs	r1, #2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb97 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10a      	bne.n	800139a <HAL_ADC_ConfigChannel+0x2e6>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fb8c 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	0e9b      	lsrs	r3, r3, #26
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	e01e      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x324>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2102      	movs	r1, #2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fb81 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80013b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80013c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80013c8:	2320      	movs	r3, #32
 80013ca:	e004      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80013cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x33c>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0e9b      	lsrs	r3, r3, #26
 80013ea:	f003 031f 	and.w	r3, r3, #31
 80013ee:	e016      	b.n	800141e <HAL_ADC_ConfigChannel+0x36a>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001410:	2320      	movs	r3, #32
 8001412:	e004      	b.n	800141e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	429a      	cmp	r2, r3
 8001420:	d106      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	2102      	movs	r1, #2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb52 	bl	8000ad4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2103      	movs	r1, #3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fb36 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10a      	bne.n	800145c <HAL_ADC_ConfigChannel+0x3a8>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2103      	movs	r1, #3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fb2b 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	0e9b      	lsrs	r3, r3, #26
 8001456:	f003 021f 	and.w	r2, r3, #31
 800145a:	e017      	b.n	800148c <HAL_ADC_ConfigChannel+0x3d8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2103      	movs	r1, #3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fb20 	bl	8000aa8 <LL_ADC_GetOffsetChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001476:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800147e:	2320      	movs	r3, #32
 8001480:	e003      	b.n	800148a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x3f0>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0e9b      	lsrs	r3, r3, #26
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	e011      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x414>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ac:	fa93 f3a3 	rbit	r3, r3
 80014b0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80014b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80014b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80014bc:	2320      	movs	r3, #32
 80014be:	e003      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80014c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d106      	bne.n	80014da <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	2103      	movs	r1, #3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fafd 	bl	8000ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fc26 	bl	8000d30 <LL_ADC_IsEnabled>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 8140 	bne.w	800176c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	461a      	mov	r2, r3
 80014fa:	f7ff fba7 	bl	8000c4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4a8f      	ldr	r2, [pc, #572]	; (8001740 <HAL_ADC_ConfigChannel+0x68c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	f040 8131 	bne.w	800176c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10b      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x47e>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0e9b      	lsrs	r3, r3, #26
 8001520:	3301      	adds	r3, #1
 8001522:	f003 031f 	and.w	r3, r3, #31
 8001526:	2b09      	cmp	r3, #9
 8001528:	bf94      	ite	ls
 800152a:	2301      	movls	r3, #1
 800152c:	2300      	movhi	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	e019      	b.n	8001566 <HAL_ADC_ConfigChannel+0x4b2>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001542:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800154a:	2320      	movs	r3, #32
 800154c:	e003      	b.n	8001556 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800154e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2b09      	cmp	r3, #9
 800155e:	bf94      	ite	ls
 8001560:	2301      	movls	r3, #1
 8001562:	2300      	movhi	r3, #0
 8001564:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001566:	2b00      	cmp	r3, #0
 8001568:	d079      	beq.n	800165e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001572:	2b00      	cmp	r3, #0
 8001574:	d107      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x4d2>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0e9b      	lsrs	r3, r3, #26
 800157c:	3301      	adds	r3, #1
 800157e:	069b      	lsls	r3, r3, #26
 8001580:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001584:	e015      	b.n	80015b2 <HAL_ADC_ConfigChannel+0x4fe>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001596:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800159e:	2320      	movs	r3, #32
 80015a0:	e003      	b.n	80015aa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80015a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	069b      	lsls	r3, r3, #26
 80015ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x51e>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	0e9b      	lsrs	r3, r3, #26
 80015c4:	3301      	adds	r3, #1
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	e017      	b.n	8001602 <HAL_ADC_ConfigChannel+0x54e>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80015e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80015e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80015ea:	2320      	movs	r3, #32
 80015ec:	e003      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80015ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	ea42 0103 	orr.w	r1, r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10a      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x574>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0e9b      	lsrs	r3, r3, #26
 8001618:	3301      	adds	r3, #1
 800161a:	f003 021f 	and.w	r2, r3, #31
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	051b      	lsls	r3, r3, #20
 8001626:	e018      	b.n	800165a <HAL_ADC_ConfigChannel+0x5a6>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800163a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001640:	2320      	movs	r3, #32
 8001642:	e003      	b.n	800164c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	3301      	adds	r3, #1
 800164e:	f003 021f 	and.w	r2, r3, #31
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800165a:	430b      	orrs	r3, r1
 800165c:	e081      	b.n	8001762 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001666:	2b00      	cmp	r3, #0
 8001668:	d107      	bne.n	800167a <HAL_ADC_ConfigChannel+0x5c6>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0e9b      	lsrs	r3, r3, #26
 8001670:	3301      	adds	r3, #1
 8001672:	069b      	lsls	r3, r3, #26
 8001674:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001678:	e015      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x5f2>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001692:	2320      	movs	r3, #32
 8001694:	e003      	b.n	800169e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	3301      	adds	r3, #1
 80016a0:	069b      	lsls	r3, r3, #26
 80016a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x612>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0e9b      	lsrs	r3, r3, #26
 80016b8:	3301      	adds	r3, #1
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2101      	movs	r1, #1
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	e017      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x642>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	61fb      	str	r3, [r7, #28]
  return result;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80016de:	2320      	movs	r3, #32
 80016e0:	e003      	b.n	80016ea <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3301      	adds	r3, #1
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	ea42 0103 	orr.w	r1, r2, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x66e>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	0e9b      	lsrs	r3, r3, #26
 800170c:	3301      	adds	r3, #1
 800170e:	f003 021f 	and.w	r2, r3, #31
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3b1e      	subs	r3, #30
 800171a:	051b      	lsls	r3, r3, #20
 800171c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001720:	e01e      	b.n	8001760 <HAL_ADC_ConfigChannel+0x6ac>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	613b      	str	r3, [r7, #16]
  return result;
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d104      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800173a:	2320      	movs	r3, #32
 800173c:	e006      	b.n	800174c <HAL_ADC_ConfigChannel+0x698>
 800173e:	bf00      	nop
 8001740:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f003 021f 	and.w	r2, r3, #31
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	3b1e      	subs	r3, #30
 800175a:	051b      	lsls	r3, r3, #20
 800175c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001760:	430b      	orrs	r3, r1
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	6892      	ldr	r2, [r2, #8]
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff fa44 	bl	8000bf4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_ADC_ConfigChannel+0x7bc>)
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d070      	beq.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001778:	483e      	ldr	r0, [pc, #248]	; (8001874 <HAL_ADC_ConfigChannel+0x7c0>)
 800177a:	f7ff f963 	bl	8000a44 <LL_ADC_GetCommonPathInternalCh>
 800177e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a3c      	ldr	r2, [pc, #240]	; (8001878 <HAL_ADC_ConfigChannel+0x7c4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d004      	beq.n	8001796 <HAL_ADC_ConfigChannel+0x6e2>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3a      	ldr	r2, [pc, #232]	; (800187c <HAL_ADC_ConfigChannel+0x7c8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d126      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800179a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d120      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017aa:	d156      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017b4:	4619      	mov	r1, r3
 80017b6:	482f      	ldr	r0, [pc, #188]	; (8001874 <HAL_ADC_ConfigChannel+0x7c0>)
 80017b8:	f7ff f931 	bl	8000a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_ADC_ConfigChannel+0x7cc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	099b      	lsrs	r3, r3, #6
 80017c2:	4a30      	ldr	r2, [pc, #192]	; (8001884 <HAL_ADC_ConfigChannel+0x7d0>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	099a      	lsrs	r2, r3, #6
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017e2:	e03a      	b.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a27      	ldr	r2, [pc, #156]	; (8001888 <HAL_ADC_ConfigChannel+0x7d4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d113      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x762>
 80017ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a23      	ldr	r2, [pc, #140]	; (800188c <HAL_ADC_ConfigChannel+0x7d8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d02a      	beq.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180c:	4619      	mov	r1, r3
 800180e:	4819      	ldr	r0, [pc, #100]	; (8001874 <HAL_ADC_ConfigChannel+0x7c0>)
 8001810:	f7ff f905 	bl	8000a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001814:	e021      	b.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_ADC_ConfigChannel+0x7dc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d11c      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d116      	bne.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_ADC_ConfigChannel+0x7d8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d011      	beq.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800183a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <HAL_ADC_ConfigChannel+0x7c0>)
 8001842:	f7ff f8ec 	bl	8000a1e <LL_ADC_SetCommonPathInternalCh>
 8001846:	e008      	b.n	800185a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	f043 0220 	orr.w	r2, r3, #32
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001862:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001866:	4618      	mov	r0, r3
 8001868:	37d8      	adds	r7, #216	; 0xd8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	80080000 	.word	0x80080000
 8001874:	50000300 	.word	0x50000300
 8001878:	c3210000 	.word	0xc3210000
 800187c:	90c00010 	.word	0x90c00010
 8001880:	20000000 	.word	0x20000000
 8001884:	053e2d63 	.word	0x053e2d63
 8001888:	c7520000 	.word	0xc7520000
 800188c:	50000100 	.word	0x50000100
 8001890:	cb840000 	.word	0xcb840000

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <__NVIC_EnableIRQ+0x38>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	; (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff8e 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff29 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff40 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff90 	bl	8001988 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5f 	bl	8001934 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff33 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa4 	bl	80019f0 <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ac2:	e15a      	b.n	8001d7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 814c 	beq.w	8001d74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d00b      	beq.n	8001afc <HAL_GPIO_Init+0x48>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af0:	2b11      	cmp	r3, #17
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0xea>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b12      	cmp	r3, #18
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	6939      	ldr	r1, [r7, #16]
 8001be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0203 	and.w	r2, r3, #3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80a6 	beq.w	8001d74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b5b      	ldr	r3, [pc, #364]	; (8001d98 <HAL_GPIO_Init+0x2e4>)
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	4a5a      	ldr	r2, [pc, #360]	; (8001d98 <HAL_GPIO_Init+0x2e4>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6613      	str	r3, [r2, #96]	; 0x60
 8001c34:	4b58      	ldr	r3, [pc, #352]	; (8001d98 <HAL_GPIO_Init+0x2e4>)
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x2e8>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c6a:	d01f      	beq.n	8001cac <HAL_GPIO_Init+0x1f8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x2ec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d019      	beq.n	8001ca8 <HAL_GPIO_Init+0x1f4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_GPIO_Init+0x2f0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d013      	beq.n	8001ca4 <HAL_GPIO_Init+0x1f0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a4a      	ldr	r2, [pc, #296]	; (8001da8 <HAL_GPIO_Init+0x2f4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00d      	beq.n	8001ca0 <HAL_GPIO_Init+0x1ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_GPIO_Init+0x2f8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d007      	beq.n	8001c9c <HAL_GPIO_Init+0x1e8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a48      	ldr	r2, [pc, #288]	; (8001db0 <HAL_GPIO_Init+0x2fc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_GPIO_Init+0x1e4>
 8001c94:	2305      	movs	r3, #5
 8001c96:	e00a      	b.n	8001cae <HAL_GPIO_Init+0x1fa>
 8001c98:	2306      	movs	r3, #6
 8001c9a:	e008      	b.n	8001cae <HAL_GPIO_Init+0x1fa>
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x1fa>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1fa>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1fa>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1fa>
 8001cac:	2300      	movs	r3, #0
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbe:	4937      	ldr	r1, [pc, #220]	; (8001d9c <HAL_GPIO_Init+0x2e8>)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ccc:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cf0:	4a30      	ldr	r2, [pc, #192]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d6e:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <HAL_GPIO_Init+0x300>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f ae9d 	bne.w	8001ac4 <HAL_GPIO_Init+0x10>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	48000400 	.word	0x48000400
 8001da4:	48000800 	.word	0x48000800
 8001da8:	48000c00 	.word	0x48000c00
 8001dac:	48001000 	.word	0x48001000
 8001db0:	48001400 	.word	0x48001400
 8001db4:	40010400 	.word	0x40010400

08001db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e001      	b.n	8001dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43d9      	mvns	r1, r3
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fba4 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d141      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d131      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e98:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9e:	4a46      	ldr	r2, [pc, #280]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb0:	4a41      	ldr	r2, [pc, #260]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb8:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2232      	movs	r2, #50	; 0x32
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	0c9b      	lsrs	r3, r3, #18
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ece:	e002      	b.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee2:	d102      	bne.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f2      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d158      	bne.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e057      	b.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001efc:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f02:	4a2d      	ldr	r2, [pc, #180]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f0c:	e04d      	b.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f14:	d141      	bne.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f16:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d131      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f2a:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2232      	movs	r2, #50	; 0x32
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5a:	e002      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d102      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d112      	bne.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e011      	b.n	8001fac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f98:	e007      	b.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fa8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	431bde83 	.word	0x431bde83

08001fc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd2:	6093      	str	r3, [r2, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e308      	b.n	8002608 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d075      	beq.n	80020ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002002:	4ba3      	ldr	r3, [pc, #652]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800200c:	4ba0      	ldr	r3, [pc, #640]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d102      	bne.n	8002022 <HAL_RCC_OscConfig+0x3e>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d002      	beq.n	8002028 <HAL_RCC_OscConfig+0x44>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b99      	ldr	r3, [pc, #612]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05b      	beq.n	80020ec <HAL_RCC_OscConfig+0x108>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d157      	bne.n	80020ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e2e3      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x74>
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a90      	ldr	r2, [pc, #576]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a8a      	ldr	r2, [pc, #552]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a87      	ldr	r2, [pc, #540]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a83      	ldr	r2, [pc, #524]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a80      	ldr	r2, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe fc7e 	bl	800099c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe fc7a 	bl	800099c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e2a8      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xc0>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fc6a 	bl	800099c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe fc66 	bl	800099c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e294      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0xe8>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d075      	beq.n	80021e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fa:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0x136>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d002      	beq.n	8002120 <HAL_RCC_OscConfig+0x13c>
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11f      	bne.n	8002160 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002120:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_OscConfig+0x154>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e267      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b55      	ldr	r3, [pc, #340]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	4952      	ldr	r1, [pc, #328]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800214c:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_OscConfig+0x2b0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fbd7 	bl	8000904 <HAL_InitTick>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d043      	beq.n	80021e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e253      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002168:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a48      	ldr	r2, [pc, #288]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fc12 	bl	800099c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7fe fc0e 	bl	800099c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e23c      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218e:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	4939      	ldr	r1, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
 80021ae:	e01a      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a36      	ldr	r2, [pc, #216]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe fbee 	bl	800099c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7fe fbea 	bl	800099c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e218      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x1e0>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03c      	beq.n	800226c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01c      	beq.n	8002234 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe fbc7 	bl	800099c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe fbc3 	bl	800099c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1f1      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0ef      	beq.n	8002212 <HAL_RCC_OscConfig+0x22e>
 8002232:	e01b      	b.n	800226c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223a:	4a15      	ldr	r2, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7fe fbaa 	bl	800099c <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7fe fba6 	bl	800099c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1d4      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ef      	bne.n	800224c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80ab 	beq.w	80023d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x2b4>
 800228a:	2301      	movs	r3, #1
 800228c:	e005      	b.n	800229a <HAL_RCC_OscConfig+0x2b6>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	20000004 	.word	0x20000004
 8002298:	2300      	movs	r3, #0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4baf      	ldr	r3, [pc, #700]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4aae      	ldr	r2, [pc, #696]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
 80022aa:	4bac      	ldr	r3, [pc, #688]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ba:	4ba9      	ldr	r3, [pc, #676]	; (8002560 <HAL_RCC_OscConfig+0x57c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d118      	bne.n	80022f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c6:	4ba6      	ldr	r3, [pc, #664]	; (8002560 <HAL_RCC_OscConfig+0x57c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4aa5      	ldr	r2, [pc, #660]	; (8002560 <HAL_RCC_OscConfig+0x57c>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fb63 	bl	800099c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7fe fb5f 	bl	800099c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e18d      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	4b9c      	ldr	r3, [pc, #624]	; (8002560 <HAL_RCC_OscConfig+0x57c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d108      	bne.n	8002312 <HAL_RCC_OscConfig+0x32e>
 8002300:	4b96      	ldr	r3, [pc, #600]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a95      	ldr	r2, [pc, #596]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002310:	e024      	b.n	800235c <HAL_RCC_OscConfig+0x378>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d110      	bne.n	800233c <HAL_RCC_OscConfig+0x358>
 800231a:	4b90      	ldr	r3, [pc, #576]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002320:	4a8e      	ldr	r2, [pc, #568]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800232a:	4b8c      	ldr	r3, [pc, #560]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	4a8a      	ldr	r2, [pc, #552]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x378>
 800233c:	4b87      	ldr	r3, [pc, #540]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	4a86      	ldr	r2, [pc, #536]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234c:	4b83      	ldr	r3, [pc, #524]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	4a82      	ldr	r2, [pc, #520]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d016      	beq.n	8002392 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe fb1a 	bl	800099c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fb16 	bl	800099c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e142      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b76      	ldr	r3, [pc, #472]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ed      	beq.n	800236c <HAL_RCC_OscConfig+0x388>
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe fb03 	bl	800099c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe faff 	bl	800099c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e12b      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ed      	bne.n	800239a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b65      	ldr	r3, [pc, #404]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a64      	ldr	r2, [pc, #400]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d03c      	beq.n	8002456 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01c      	beq.n	800241e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023e4:	4b5d      	ldr	r3, [pc, #372]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80023e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ea:	4a5c      	ldr	r2, [pc, #368]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fad2 	bl	800099c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023fc:	f7fe face 	bl	800099c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0fc      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <HAL_RCC_OscConfig+0x418>
 800241c:	e01b      	b.n	8002456 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800241e:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002424:	4a4d      	ldr	r2, [pc, #308]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fab5 	bl	800099c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002436:	f7fe fab1 	bl	800099c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0df      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002448:	4b44      	ldr	r3, [pc, #272]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800244a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ef      	bne.n	8002436 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80d3 	beq.w	8002606 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002460:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b0c      	cmp	r3, #12
 800246a:	f000 808d 	beq.w	8002588 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d15a      	bne.n	800252c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a38      	ldr	r2, [pc, #224]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800247c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe fa8b 	bl	800099c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe fa87 	bl	800099c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0b5      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	4b2f      	ldr	r3, [pc, #188]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b2d      	ldr	r3, [pc, #180]	; (8002564 <HAL_RCC_OscConfig+0x580>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6a11      	ldr	r1, [r2, #32]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024c2:	0212      	lsls	r2, r2, #8
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024ca:	0852      	lsrs	r2, r2, #1
 80024cc:	3a01      	subs	r2, #1
 80024ce:	0552      	lsls	r2, r2, #21
 80024d0:	4311      	orrs	r1, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024d6:	0852      	lsrs	r2, r2, #1
 80024d8:	3a01      	subs	r2, #1
 80024da:	0652      	lsls	r2, r2, #25
 80024dc:	4311      	orrs	r1, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024e2:	06d2      	lsls	r2, r2, #27
 80024e4:	430a      	orrs	r2, r1
 80024e6:	491d      	ldr	r1, [pc, #116]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1a      	ldr	r2, [pc, #104]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80024f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_RCC_OscConfig+0x578>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe fa4a 	bl	800099c <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fa46 	bl	800099c <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e074      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x528>
 800252a:	e06c      	b.n	8002606 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800253e:	f023 0303 	bic.w	r3, r3, #3
 8002542:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_OscConfig+0x578>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_RCC_OscConfig+0x578>)
 800254a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fa22 	bl	800099c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255a:	e00e      	b.n	800257a <HAL_RCC_OscConfig+0x596>
 800255c:	40021000 	.word	0x40021000
 8002560:	40007000 	.word	0x40007000
 8002564:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fa18 	bl	800099c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e046      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_RCC_OscConfig+0x62c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x584>
 8002586:	e03e      	b.n	8002606 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e039      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_OscConfig+0x62c>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d12c      	bne.n	8002602 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d123      	bne.n	8002602 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11b      	bne.n	8002602 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d113      	bne.n	8002602 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	3b01      	subs	r3, #1
 80025fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e11e      	b.n	800286a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b91      	ldr	r3, [pc, #580]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b8e      	ldr	r3, [pc, #568]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	498c      	ldr	r1, [pc, #560]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b8a      	ldr	r3, [pc, #552]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e106      	b.n	800286a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d073      	beq.n	8002750 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d129      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002670:	4b81      	ldr	r3, [pc, #516]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0f4      	b.n	800286a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002680:	f000 f966 	bl	8002950 <RCC_GetSysClockFreqFromPLLSource>
 8002684:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4a7c      	ldr	r2, [pc, #496]	; (800287c <HAL_RCC_ClockConfig+0x268>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d93f      	bls.n	800270e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800268e:	4b7a      	ldr	r3, [pc, #488]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d033      	beq.n	800270e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12f      	bne.n	800270e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ae:	4b72      	ldr	r3, [pc, #456]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026b6:	4a70      	ldr	r2, [pc, #448]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e024      	b.n	800270e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0c6      	b.n	800286a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026dc:	4b66      	ldr	r3, [pc, #408]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0be      	b.n	800286a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026ec:	f000 f8ce 	bl	800288c <HAL_RCC_GetSysClockFreq>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4a61      	ldr	r2, [pc, #388]	; (800287c <HAL_RCC_ClockConfig+0x268>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d909      	bls.n	800270e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026fa:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002702:	4a5d      	ldr	r2, [pc, #372]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4957      	ldr	r1, [pc, #348]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe f93c 	bl	800099c <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe f938 	bl	800099c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e095      	b.n	800286a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d023      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a42      	ldr	r2, [pc, #264]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800276e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002772:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002780:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002788:	4a3b      	ldr	r2, [pc, #236]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800278a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800278e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4936      	ldr	r1, [pc, #216]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b80      	cmp	r3, #128	; 0x80
 80027a8:	d105      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027aa:	4b33      	ldr	r3, [pc, #204]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4a32      	ldr	r2, [pc, #200]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 80027b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d21d      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c4:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 020f 	bic.w	r2, r3, #15
 80027cc:	4929      	ldr	r1, [pc, #164]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027d4:	f7fe f8e2 	bl	800099c <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe f8de 	bl	800099c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e03b      	b.n	800286a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1ed      	bne.n	80027dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4917      	ldr	r1, [pc, #92]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	490f      	ldr	r1, [pc, #60]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800283e:	f000 f825 	bl	800288c <HAL_RCC_GetSysClockFreq>
 8002842:	4601      	mov	r1, r0
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <HAL_RCC_ClockConfig+0x26c>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	fa21 f303 	lsr.w	r3, r1, r3
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x270>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe f84e 	bl	8000904 <HAL_InitTick>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	04c4b400 	.word	0x04c4b400
 8002880:	080039cc 	.word	0x080039cc
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002892:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d102      	bne.n	80028a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	e047      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d102      	bne.n	80028b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b0:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	e03e      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d136      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3301      	adds	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e0:	4a1a      	ldr	r2, [pc, #104]	; (800294c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4a16      	ldr	r2, [pc, #88]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ea:	68d2      	ldr	r2, [r2, #12]
 80028ec:	0a12      	lsrs	r2, r2, #8
 80028ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
      break;
 80028f8:	e00c      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002904:	68d2      	ldr	r2, [r2, #12]
 8002906:	0a12      	lsrs	r2, r2, #8
 8002908:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
      break;
 8002912:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0e5b      	lsrs	r3, r3, #25
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e001      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002934:	693b      	ldr	r3, [r7, #16]
}
 8002936:	4618      	mov	r0, r3
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200

08002950 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3301      	adds	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d10c      	bne.n	800298e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002974:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800297e:	68d2      	ldr	r2, [r2, #12]
 8002980:	0a12      	lsrs	r2, r2, #8
 8002982:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	617b      	str	r3, [r7, #20]
    break;
 800298c:	e00c      	b.n	80029a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002998:	68d2      	ldr	r2, [r2, #12]
 800299a:	0a12      	lsrs	r2, r2, #8
 800299c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    break;
 80029a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0e5b      	lsrs	r3, r3, #25
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029c2:	687b      	ldr	r3, [r7, #4]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40021000 	.word	0x40021000
 80029d4:	007a1200 	.word	0x007a1200
 80029d8:	00f42400 	.word	0x00f42400

080029dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029e4:	2300      	movs	r3, #0
 80029e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029e8:	2300      	movs	r3, #0
 80029ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8098 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fa:	2300      	movs	r3, #0
 80029fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b43      	ldr	r3, [pc, #268]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6593      	str	r3, [r2, #88]	; 0x58
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a22:	2301      	movs	r3, #1
 8002a24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a26:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a39      	ldr	r2, [pc, #228]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a32:	f7fd ffb3 	bl	800099c <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a38:	e009      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fd ffaf 	bl	800099c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d902      	bls.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a4c:	e005      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ef      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d159      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a60:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01e      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d019      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a88:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aa8:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fd ff6f 	bl	800099c <HAL_GetTick>
 8002abe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac0:	e00b      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fd ff6b 	bl	800099c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d902      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ad8:	e006      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ec      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aee:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b04:	e008      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	74bb      	strb	r3, [r7, #18]
 8002b0a:	e005      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b18:	7c7b      	ldrb	r3, [r7, #17]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4ba6      	ldr	r3, [pc, #664]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	4aa5      	ldr	r2, [pc, #660]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b36:	4ba0      	ldr	r3, [pc, #640]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f023 0203 	bic.w	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	499c      	ldr	r1, [pc, #624]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b58:	4b97      	ldr	r3, [pc, #604]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 020c 	bic.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	4994      	ldr	r1, [pc, #592]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b7a:	4b8f      	ldr	r3, [pc, #572]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	498b      	ldr	r1, [pc, #556]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b9c:	4b86      	ldr	r3, [pc, #536]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	4983      	ldr	r1, [pc, #524]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bbe:	4b7e      	ldr	r3, [pc, #504]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	497a      	ldr	r1, [pc, #488]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be0:	4b75      	ldr	r3, [pc, #468]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	4972      	ldr	r1, [pc, #456]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c02:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	4969      	ldr	r1, [pc, #420]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c24:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4961      	ldr	r1, [pc, #388]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c46:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	4958      	ldr	r1, [pc, #352]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c68:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	4950      	ldr	r1, [pc, #320]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c86:	d105      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c88:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a4a      	ldr	r2, [pc, #296]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ca0:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	4942      	ldr	r1, [pc, #264]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a3c      	ldr	r2, [pc, #240]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4934      	ldr	r1, [pc, #208]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	4926      	ldr	r1, [pc, #152]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	4918      	ldr	r1, [pc, #96]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d66:	d105      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	490a      	ldr	r1, [pc, #40]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dac:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e049      	b.n	8002e62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd fc9e 	bl	8000724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f000 fb1a 	bl	8003434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d001      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e04a      	b.n	8002f1a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a21      	ldr	r2, [pc, #132]	; (8002f28 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d013      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_TIM_Base_Start_IT+0xc0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d115      	bne.n	8002f04 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d015      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0xaa>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d011      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f02:	e008      	b.n	8002f16 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e000      	b.n	8002f18 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40013400 	.word	0x40013400
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	00010007 	.word	0x00010007

08002f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0202 	mvn.w	r2, #2
 8002f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa38 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa2a 	bl	80033e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fa3b 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0204 	mvn.w	r2, #4
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa0e 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa00 	bl	80033e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fa11 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b08      	cmp	r3, #8
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0208 	mvn.w	r2, #8
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9e4 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f9d6 	bl	80033e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f9e7 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b10      	cmp	r3, #16
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b10      	cmp	r3, #16
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0210 	mvn.w	r2, #16
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2208      	movs	r2, #8
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9ba 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9ac 	bl	80033e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f9bd 	bl	800340c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10e      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0201 	mvn.w	r2, #1
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd faba 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fbfa 	bl	80038e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fe:	d10e      	bne.n	800311e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d107      	bne.n	800311e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fbed 	bl	80038f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b40      	cmp	r3, #64	; 0x40
 800312a:	d10e      	bne.n	800314a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b40      	cmp	r3, #64	; 0x40
 8003138:	d107      	bne.n	800314a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f96b 	bl	8003420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b20      	cmp	r3, #32
 8003156:	d10e      	bne.n	8003176 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d107      	bne.n	8003176 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f06f 0220 	mvn.w	r2, #32
 800316e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fbad 	bl	80038d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003184:	d10f      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fbb3 	bl	800390c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b4:	d10f      	bne.n	80031d6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031c4:	d107      	bne.n	80031d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80031ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fba5 	bl	8003920 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e4:	d10f      	bne.n	8003206 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f4:	d107      	bne.n	8003206 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fb97 	bl	8003934 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003214:	d10f      	bne.n	8003236 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003224:	d107      	bne.n	8003236 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fb89 	bl	8003948 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_TIM_ConfigClockSource+0x18>
 8003254:	2302      	movs	r3, #2
 8003256:	e0b9      	b.n	80033cc <HAL_TIM_ConfigClockSource+0x18c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800327a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003282:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b70      	cmp	r3, #112	; 0x70
 8003292:	d02e      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0xb2>
 8003294:	2b70      	cmp	r3, #112	; 0x70
 8003296:	d812      	bhi.n	80032be <HAL_TIM_ConfigClockSource+0x7e>
 8003298:	2b30      	cmp	r3, #48	; 0x30
 800329a:	f000 8084 	beq.w	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 800329e:	2b30      	cmp	r3, #48	; 0x30
 80032a0:	d806      	bhi.n	80032b0 <HAL_TIM_ConfigClockSource+0x70>
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d07f      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d07d      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d07b      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032ae:	e084      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80032b0:	2b50      	cmp	r3, #80	; 0x50
 80032b2:	d048      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x106>
 80032b4:	2b60      	cmp	r3, #96	; 0x60
 80032b6:	d056      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x126>
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d064      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x146>
      break;
 80032bc:	e07d      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80032be:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <HAL_TIM_ConfigClockSource+0x194>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d070      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032c4:	4a43      	ldr	r2, [pc, #268]	; (80033d4 <HAL_TIM_ConfigClockSource+0x194>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d809      	bhi.n	80032de <HAL_TIM_ConfigClockSource+0x9e>
 80032ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ce:	d027      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0xe0>
 80032d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80032d4:	d067      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	d06d      	beq.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032dc:	e06d      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80032de:	4a3e      	ldr	r2, [pc, #248]	; (80033d8 <HAL_TIM_ConfigClockSource+0x198>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d060      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032e4:	4a3d      	ldr	r2, [pc, #244]	; (80033dc <HAL_TIM_ConfigClockSource+0x19c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d05d      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032ea:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <HAL_TIM_ConfigClockSource+0x1a0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d05a      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80032f0:	e063      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6899      	ldr	r1, [r3, #8]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f000 f9a3 	bl	800364c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003314:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	609a      	str	r2, [r3, #8]
      break;
 800331e:	e04c      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f000 f98c 	bl	800364c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003342:	609a      	str	r2, [r3, #8]
      break;
 8003344:	e039      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	461a      	mov	r2, r3
 8003354:	f000 f8fe 	bl	8003554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2150      	movs	r1, #80	; 0x50
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f957 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 8003364:	e029      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	461a      	mov	r2, r3
 8003374:	f000 f91d 	bl	80035b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2160      	movs	r1, #96	; 0x60
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f947 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 8003384:	e019      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	461a      	mov	r2, r3
 8003394:	f000 f8de 	bl	8003554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2140      	movs	r1, #64	; 0x40
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f937 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 80033a4:	e009      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f000 f92e 	bl	8003612 <TIM_ITRx_SetConfig>
        break;
 80033b6:	e000      	b.n	80033ba <HAL_TIM_ConfigClockSource+0x17a>
      break;
 80033b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	00100020 	.word	0x00100020
 80033d8:	00100040 	.word	0x00100040
 80033dc:	00100070 	.word	0x00100070
 80033e0:	00100030 	.word	0x00100030

080033e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <TIM_Base_SetConfig+0x104>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00f      	beq.n	800346c <TIM_Base_SetConfig+0x38>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d00b      	beq.n	800346c <TIM_Base_SetConfig+0x38>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a39      	ldr	r2, [pc, #228]	; (800353c <TIM_Base_SetConfig+0x108>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_Base_SetConfig+0x38>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a38      	ldr	r2, [pc, #224]	; (8003540 <TIM_Base_SetConfig+0x10c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0x38>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a37      	ldr	r2, [pc, #220]	; (8003544 <TIM_Base_SetConfig+0x110>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d108      	bne.n	800347e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <TIM_Base_SetConfig+0x104>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01b      	beq.n	80034be <TIM_Base_SetConfig+0x8a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d017      	beq.n	80034be <TIM_Base_SetConfig+0x8a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <TIM_Base_SetConfig+0x108>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0x8a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a29      	ldr	r2, [pc, #164]	; (8003540 <TIM_Base_SetConfig+0x10c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0x8a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a28      	ldr	r2, [pc, #160]	; (8003544 <TIM_Base_SetConfig+0x110>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0x8a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a27      	ldr	r2, [pc, #156]	; (8003548 <TIM_Base_SetConfig+0x114>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0x8a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <TIM_Base_SetConfig+0x118>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0x8a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a25      	ldr	r2, [pc, #148]	; (8003550 <TIM_Base_SetConfig+0x11c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <TIM_Base_SetConfig+0x104>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00f      	beq.n	800351c <TIM_Base_SetConfig+0xe8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a11      	ldr	r2, [pc, #68]	; (8003544 <TIM_Base_SetConfig+0x110>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00b      	beq.n	800351c <TIM_Base_SetConfig+0xe8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a10      	ldr	r2, [pc, #64]	; (8003548 <TIM_Base_SetConfig+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_Base_SetConfig+0xe8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0f      	ldr	r2, [pc, #60]	; (800354c <TIM_Base_SetConfig+0x118>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0xe8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <TIM_Base_SetConfig+0x11c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d103      	bne.n	8003524 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	615a      	str	r2, [r3, #20]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40013400 	.word	0x40013400
 8003548:	40014000 	.word	0x40014000
 800354c:	40014400 	.word	0x40014400
 8003550:	40014800 	.word	0x40014800

08003554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f023 0201 	bic.w	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 030a 	bic.w	r3, r3, #10
 8003590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b087      	sub	sp, #28
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0210 	bic.w	r2, r3, #16
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	031b      	lsls	r3, r3, #12
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	f043 0307 	orr.w	r3, r3, #7
 8003638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	431a      	orrs	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e065      	b.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a2c      	ldr	r2, [pc, #176]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2b      	ldr	r2, [pc, #172]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d108      	bne.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d018      	beq.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d013      	beq.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00e      	beq.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d009      	beq.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a12      	ldr	r2, [pc, #72]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a13      	ldr	r2, [pc, #76]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10c      	bne.n	800375e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40013400 	.word	0x40013400
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40014000 	.word	0x40014000

08003790 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e087      	b.n	80038bc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a25      	ldr	r2, [pc, #148]	; (80038cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d106      	bne.n	8003848 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d004      	beq.n	800385c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d126      	bne.n	80038aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	051b      	lsls	r3, r3, #20
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d106      	bne.n	80038aa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40013400 	.word	0x40013400

080038d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4e0d      	ldr	r6, [pc, #52]	; (8003994 <__libc_init_array+0x38>)
 8003960:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003962:	1ba4      	subs	r4, r4, r6
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2500      	movs	r5, #0
 8003968:	42a5      	cmp	r5, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	4e0b      	ldr	r6, [pc, #44]	; (800399c <__libc_init_array+0x40>)
 800396e:	4c0c      	ldr	r4, [pc, #48]	; (80039a0 <__libc_init_array+0x44>)
 8003970:	f000 f820 	bl	80039b4 <_init>
 8003974:	1ba4      	subs	r4, r4, r6
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	2500      	movs	r5, #0
 800397a:	42a5      	cmp	r5, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003984:	4798      	blx	r3
 8003986:	3501      	adds	r5, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800398e:	4798      	blx	r3
 8003990:	3501      	adds	r5, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	080039dc 	.word	0x080039dc
 8003998:	080039dc 	.word	0x080039dc
 800399c:	080039dc 	.word	0x080039dc
 80039a0:	080039e0 	.word	0x080039e0

080039a4 <memset>:
 80039a4:	4402      	add	r2, r0
 80039a6:	4603      	mov	r3, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <_init>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

080039c0 <_fini>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr
