
ADC_SWTrig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002218  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080023b8  080023b8  000123b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  20000068  0800249c  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000198  0800249c  00020198  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012928  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000241f  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006040  00000000  00000000  00034ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000890  00000000  00000000  0003ae20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b78  00000000  00000000  0003b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016eb3  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009214  00000000  00000000  000530db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0008c290  00000000  00000000  0005c2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000e857f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c68  00000000  00000000  000e85fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080023a0 	.word	0x080023a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080023a0 	.word	0x080023a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000290:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <HAL_InitTick+0x24>)
{
 8000294:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029c:	fbb0 f0f3 	udiv	r0, r0, r3
 80002a0:	f000 fa76 	bl	8000790 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002a4:	2200      	movs	r2, #0
 80002a6:	4621      	mov	r1, r4
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ac:	f000 fa30 	bl	8000710 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80002b0:	2000      	movs	r0, #0
 80002b2:	bd10      	pop	{r4, pc}
 80002b4:	20000000 	.word	0x20000000

080002b8 <HAL_Init>:
{
 80002b8:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <HAL_Init+0x30>)
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002c2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002d2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002d4:	2003      	movs	r0, #3
 80002d6:	f000 fa09 	bl	80006ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002da:	2000      	movs	r0, #0
 80002dc:	f7ff ffd8 	bl	8000290 <HAL_InitTick>
  HAL_MspInit();
 80002e0:	f001 fb24 	bl	800192c <HAL_MspInit>
}
 80002e4:	2000      	movs	r0, #0
 80002e6:	bd08      	pop	{r3, pc}
 80002e8:	40023c00 	.word	0x40023c00

080002ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002ec:	4a02      	ldr	r2, [pc, #8]	; (80002f8 <HAL_IncTick+0xc>)
 80002ee:	6813      	ldr	r3, [r2, #0]
 80002f0:	3301      	adds	r3, #1
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000090 	.word	0x20000090

080002fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002fc:	4b01      	ldr	r3, [pc, #4]	; (8000304 <HAL_GetTick+0x8>)
 80002fe:	6818      	ldr	r0, [r3, #0]
}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	20000090 	.word	0x20000090

08000308 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000308:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800030a:	4604      	mov	r4, r0
 800030c:	2800      	cmp	r0, #0
 800030e:	f000 809f 	beq.w	8000450 <HAL_ADC_Init+0x148>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000312:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000314:	b923      	cbnz	r3, 8000320 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000316:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000318:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800031c:	f001 fb36 	bl	800198c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000322:	06db      	lsls	r3, r3, #27
 8000324:	f100 8092 	bmi.w	800044c <HAL_ADC_Init+0x144>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800032a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800032e:	f023 0302 	bic.w	r3, r3, #2
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000338:	4b46      	ldr	r3, [pc, #280]	; (8000454 <HAL_ADC_Init+0x14c>)
 800033a:	685a      	ldr	r2, [r3, #4]
 800033c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000340:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	6861      	ldr	r1, [r4, #4]
 8000346:	430a      	orrs	r2, r1
 8000348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800034a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800034c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800035c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800035e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000360:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000362:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000366:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000368:	685a      	ldr	r2, [r3, #4]
 800036a:	430a      	orrs	r2, r1
 800036c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800036e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000370:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000378:	689a      	ldr	r2, [r3, #8]
 800037a:	430a      	orrs	r2, r1
 800037c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800037e:	4936      	ldr	r1, [pc, #216]	; (8000458 <HAL_ADC_Init+0x150>)
 8000380:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000382:	428a      	cmp	r2, r1
 8000384:	d056      	beq.n	8000434 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000386:	6899      	ldr	r1, [r3, #8]
 8000388:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800038c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800038e:	6899      	ldr	r1, [r3, #8]
 8000390:	430a      	orrs	r2, r1
 8000392:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000394:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000396:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800039c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800039e:	689a      	ldr	r2, [r3, #8]
 80003a0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80003a2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80003a4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80003a6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80003a8:	f022 0202 	bic.w	r2, r2, #2
 80003ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80003ae:	689a      	ldr	r2, [r3, #8]
 80003b0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80003b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80003b6:	6a22      	ldr	r2, [r4, #32]
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	d043      	beq.n	8000444 <HAL_ADC_Init+0x13c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80003bc:	685a      	ldr	r2, [r3, #4]
 80003be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80003c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80003c4:	685a      	ldr	r2, [r3, #4]
 80003c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80003ca:	605a      	str	r2, [r3, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003cc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80003d0:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80003d4:	fab2 f182 	clz	r1, r2
 80003d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80003da:	6858      	ldr	r0, [r3, #4]
 80003dc:	3a01      	subs	r2, #1
 80003de:	408a      	lsls	r2, r1
 80003e0:	4302      	orrs	r2, r0
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80003e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80003e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80003e6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80003e8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80003ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80003ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003f0:	3901      	subs	r1, #1
 80003f2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80003f6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80003f8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80003fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80003fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000408:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800040a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800040c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800040e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000414:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000416:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000418:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800041c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800041e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000422:	f023 0303 	bic.w	r3, r3, #3
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800042c:	2300      	movs	r3, #0
 800042e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000432:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000434:	689a      	ldr	r2, [r3, #8]
 8000436:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800043a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800043c:	689a      	ldr	r2, [r3, #8]
 800043e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000442:	e7ae      	b.n	80003a2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000444:	685a      	ldr	r2, [r3, #4]
 8000446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800044a:	e7ca      	b.n	80003e2 <HAL_ADC_Init+0xda>
    tmp_hal_status = HAL_ERROR;
 800044c:	2001      	movs	r0, #1
 800044e:	e7ed      	b.n	800042c <HAL_ADC_Init+0x124>
    return HAL_ERROR;
 8000450:	2001      	movs	r0, #1
 8000452:	e7ee      	b.n	8000432 <HAL_ADC_Init+0x12a>
 8000454:	40012300 	.word	0x40012300
 8000458:	0f000001 	.word	0x0f000001

0800045c <HAL_ADC_Start>:
{
 800045c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800045e:	2300      	movs	r3, #0
 8000460:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000462:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000466:	2b01      	cmp	r3, #1
 8000468:	d04e      	beq.n	8000508 <HAL_ADC_Start+0xac>
 800046a:	2301      	movs	r3, #1
 800046c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000470:	6803      	ldr	r3, [r0, #0]
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	07d1      	lsls	r1, r2, #31
 8000476:	d505      	bpl.n	8000484 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000478:	689a      	ldr	r2, [r3, #8]
 800047a:	07d2      	lsls	r2, r2, #31
 800047c:	d414      	bmi.n	80004a8 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800047e:	2000      	movs	r0, #0
}
 8000480:	b002      	add	sp, #8
 8000482:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000484:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000486:	4921      	ldr	r1, [pc, #132]	; (800050c <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000488:	f042 0201 	orr.w	r2, r2, #1
 800048c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800048e:	4a20      	ldr	r2, [pc, #128]	; (8000510 <HAL_ADC_Start+0xb4>)
 8000490:	6812      	ldr	r2, [r2, #0]
 8000492:	fbb2 f2f1 	udiv	r2, r2, r1
 8000496:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800049a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 800049c:	9a01      	ldr	r2, [sp, #4]
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d0ea      	beq.n	8000478 <HAL_ADC_Start+0x1c>
      counter--;
 80004a2:	9a01      	ldr	r2, [sp, #4]
 80004a4:	3a01      	subs	r2, #1
 80004a6:	e7f8      	b.n	800049a <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80004a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80004aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80004ae:	f022 0201 	bic.w	r2, r2, #1
 80004b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004b6:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80004bc:	bf41      	itttt	mi
 80004be:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80004c0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80004c4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80004c8:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80004cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004d0:	bf1c      	itt	ne
 80004d2:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80004d4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80004d8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80004da:	2200      	movs	r2, #0
 80004dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80004e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80004e4:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <HAL_ADC_Start+0xb8>)
 80004e8:	6852      	ldr	r2, [r2, #4]
 80004ea:	06d2      	lsls	r2, r2, #27
 80004ec:	d108      	bne.n	8000500 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80004ee:	6898      	ldr	r0, [r3, #8]
 80004f0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80004f4:	d1c3      	bne.n	800047e <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	e7bf      	b.n	8000480 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <HAL_ADC_Start+0xbc>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d1bb      	bne.n	800047e <HAL_ADC_Start+0x22>
 8000506:	e7f2      	b.n	80004ee <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000508:	2002      	movs	r0, #2
 800050a:	e7b9      	b.n	8000480 <HAL_ADC_Start+0x24>
 800050c:	000f4240 	.word	0x000f4240
 8000510:	20000000 	.word	0x20000000
 8000514:	40012300 	.word	0x40012300
 8000518:	40012000 	.word	0x40012000

0800051c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800051c:	6803      	ldr	r3, [r0, #0]
 800051e:	689a      	ldr	r2, [r3, #8]
{
 8000520:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000522:	0556      	lsls	r6, r2, #21
{
 8000524:	4604      	mov	r4, r0
 8000526:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000528:	d50b      	bpl.n	8000542 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800052a:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800052c:	05d8      	lsls	r0, r3, #23
 800052e:	d508      	bpl.n	8000542 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8000538:	2300      	movs	r3, #0
 800053a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800053e:	2001      	movs	r0, #1
}
 8000540:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000542:	f7ff fedb 	bl	80002fc <HAL_GetTick>
 8000546:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000548:	6823      	ldr	r3, [r4, #0]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	0792      	lsls	r2, r2, #30
 800054e:	d50c      	bpl.n	800056a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000550:	f06f 0212 	mvn.w	r2, #18
 8000554:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000556:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800055c:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000564:	d013      	beq.n	800058e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8000566:	2000      	movs	r0, #0
 8000568:	e7ea      	b.n	8000540 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800056a:	1c69      	adds	r1, r5, #1
 800056c:	d0ed      	beq.n	800054a <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800056e:	b945      	cbnz	r5, 8000582 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000578:	2300      	movs	r3, #0
 800057a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800057e:	2003      	movs	r0, #3
 8000580:	e7de      	b.n	8000540 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000582:	f7ff febb 	bl	80002fc <HAL_GetTick>
 8000586:	1b80      	subs	r0, r0, r6
 8000588:	42a8      	cmp	r0, r5
 800058a:	d9dd      	bls.n	8000548 <HAL_ADC_PollForConversion+0x2c>
 800058c:	e7f0      	b.n	8000570 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800058e:	69a2      	ldr	r2, [r4, #24]
 8000590:	2a00      	cmp	r2, #0
 8000592:	d1e8      	bne.n	8000566 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000596:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800059a:	d002      	beq.n	80005a2 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800059c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800059e:	055b      	lsls	r3, r3, #21
 80005a0:	d4e1      	bmi.n	8000566 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80005a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a8:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80005ac:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80005b0:	d1d9      	bne.n	8000566 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80005b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6423      	str	r3, [r4, #64]	; 0x40
 80005ba:	e7c1      	b.n	8000540 <HAL_ADC_PollForConversion+0x24>

080005bc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80005bc:	6803      	ldr	r3, [r0, #0]
 80005be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_ADC_ConfigChannel>:
{
 80005c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80005ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d066      	beq.n	80006a0 <HAL_ADC_ConfigChannel+0xdc>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80005d2:	680d      	ldr	r5, [r1, #0]
 80005d4:	688e      	ldr	r6, [r1, #8]
  __HAL_LOCK(hadc);
 80005d6:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80005d8:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80005da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80005de:	b2ac      	uxth	r4, r5
 80005e0:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80005e2:	d929      	bls.n	8000638 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80005e4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80005e8:	68df      	ldr	r7, [r3, #12]
 80005ea:	3a1e      	subs	r2, #30
 80005ec:	f04f 0c07 	mov.w	ip, #7
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	ea27 070c 	bic.w	r7, r7, ip
 80005f8:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80005fa:	68df      	ldr	r7, [r3, #12]
 80005fc:	fa06 f202 	lsl.w	r2, r6, r2
 8000600:	433a      	orrs	r2, r7
 8000602:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8000604:	6849      	ldr	r1, [r1, #4]
 8000606:	2906      	cmp	r1, #6
 8000608:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800060c:	d824      	bhi.n	8000658 <HAL_ADC_ConfigChannel+0x94>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800060e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000610:	3a05      	subs	r2, #5
 8000612:	261f      	movs	r6, #31
 8000614:	4096      	lsls	r6, r2
 8000616:	ea21 0106 	bic.w	r1, r1, r6
 800061a:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800061c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800061e:	fa04 f202 	lsl.w	r2, r4, r2
 8000622:	430a      	orrs	r2, r1
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000626:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <HAL_ADC_ConfigChannel+0x114>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d031      	beq.n	8000690 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_UNLOCK(hadc);
 800062c:	2300      	movs	r3, #0
 800062e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000632:	4618      	mov	r0, r3
}
 8000634:	b003      	add	sp, #12
 8000636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000638:	691f      	ldr	r7, [r3, #16]
 800063a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800063e:	f04f 0c07 	mov.w	ip, #7
 8000642:	fa0c fc02 	lsl.w	ip, ip, r2
 8000646:	ea27 070c 	bic.w	r7, r7, ip
 800064a:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800064c:	691f      	ldr	r7, [r3, #16]
 800064e:	fa06 f202 	lsl.w	r2, r6, r2
 8000652:	433a      	orrs	r2, r7
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	e7d5      	b.n	8000604 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000658:	290c      	cmp	r1, #12
 800065a:	f04f 011f 	mov.w	r1, #31
 800065e:	d80b      	bhi.n	8000678 <HAL_ADC_ConfigChannel+0xb4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000660:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000662:	3a23      	subs	r2, #35	; 0x23
 8000664:	4091      	lsls	r1, r2
 8000666:	ea26 0101 	bic.w	r1, r6, r1
 800066a:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800066c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800066e:	fa04 f202 	lsl.w	r2, r4, r2
 8000672:	430a      	orrs	r2, r1
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	e7d6      	b.n	8000626 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000678:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800067a:	3a41      	subs	r2, #65	; 0x41
 800067c:	4091      	lsls	r1, r2
 800067e:	ea26 0101 	bic.w	r1, r6, r1
 8000682:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000686:	fa04 f202 	lsl.w	r2, r4, r2
 800068a:	430a      	orrs	r2, r1
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
 800068e:	e7ca      	b.n	8000626 <HAL_ADC_ConfigChannel+0x62>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000690:	2d12      	cmp	r5, #18
 8000692:	d107      	bne.n	80006a4 <HAL_ADC_ConfigChannel+0xe0>
    ADC->CCR |= ADC_CCR_VBATE;
 8000694:	4a11      	ldr	r2, [pc, #68]	; (80006dc <HAL_ADC_ConfigChannel+0x118>)
 8000696:	6853      	ldr	r3, [r2, #4]
 8000698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800069c:	6053      	str	r3, [r2, #4]
 800069e:	e7c5      	b.n	800062c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80006a0:	2002      	movs	r0, #2
 80006a2:	e7c7      	b.n	8000634 <HAL_ADC_ConfigChannel+0x70>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_ADC_ConfigChannel+0x11c>)
 80006a6:	429d      	cmp	r5, r3
 80006a8:	d001      	beq.n	80006ae <HAL_ADC_ConfigChannel+0xea>
 80006aa:	2d11      	cmp	r5, #17
 80006ac:	d1be      	bne.n	800062c <HAL_ADC_ConfigChannel+0x68>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80006ae:	490b      	ldr	r1, [pc, #44]	; (80006dc <HAL_ADC_ConfigChannel+0x118>)
 80006b0:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006b2:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 80006b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006b8:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80006ba:	d1b7      	bne.n	800062c <HAL_ADC_ConfigChannel+0x68>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_ADC_ConfigChannel+0x120>)
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <HAL_ADC_ConfigChannel+0x124>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80006c6:	230a      	movs	r3, #10
 80006c8:	4353      	muls	r3, r2
        counter--;
 80006ca:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80006cc:	9b01      	ldr	r3, [sp, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0ac      	beq.n	800062c <HAL_ADC_ConfigChannel+0x68>
        counter--;
 80006d2:	9b01      	ldr	r3, [sp, #4]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	e7f8      	b.n	80006ca <HAL_ADC_ConfigChannel+0x106>
 80006d8:	40012000 	.word	0x40012000
 80006dc:	40012300 	.word	0x40012300
 80006e0:	10000012 	.word	0x10000012
 80006e4:	20000000 	.word	0x20000000
 80006e8:	000f4240 	.word	0x000f4240

080006ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006f4:	041b      	lsls	r3, r3, #16
 80006f6:	0c1b      	lsrs	r3, r3, #16
 80006f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006fc:	0200      	lsls	r0, r0, #8
 80006fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000702:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000706:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000708:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000712:	b570      	push	{r4, r5, r6, lr}
 8000714:	68dc      	ldr	r4, [r3, #12]
 8000716:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071a:	f1c4 0507 	rsb	r5, r4, #7
 800071e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000720:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000724:	bf28      	it	cs
 8000726:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072c:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	bf8c      	ite	hi
 8000734:	3c03      	subhi	r4, #3
 8000736:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	ea21 0303 	bic.w	r3, r1, r3
 800073c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073e:	fa06 f404 	lsl.w	r4, r6, r4
 8000742:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8000746:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	bfa8      	it	ge
 800074e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000752:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	bfbc      	itt	lt
 8000758:	f000 000f 	andlt.w	r0, r0, #15
 800075c:	4a05      	ldrlt	r2, [pc, #20]	; (8000774 <HAL_NVIC_SetPriority+0x64>)
 800075e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	bfaa      	itet	ge
 8000762:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	e000ed14 	.word	0xe000ed14

08000778 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000778:	0942      	lsrs	r2, r0, #5
 800077a:	2301      	movs	r3, #1
 800077c:	f000 001f 	and.w	r0, r0, #31
 8000780:	fa03 f000 	lsl.w	r0, r3, r0
 8000784:	4b01      	ldr	r3, [pc, #4]	; (800078c <HAL_NVIC_EnableIRQ+0x14>)
 8000786:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100

08000790 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	3801      	subs	r0, #1
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d20a      	bcs.n	80007ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	21f0      	movs	r1, #240	; 0xf0
 80007a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007be:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007c0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007c2:	bf0c      	ite	eq
 80007c4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007c8:	f022 0204 	bicne.w	r2, r2, #4
 80007cc:	601a      	str	r2, [r3, #0]
  }
}
 80007ce:	4770      	bx	lr
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007d4:	4770      	bx	lr

080007d6 <HAL_SYSTICK_IRQHandler>:
{
 80007d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007d8:	f7ff fffc 	bl	80007d4 <HAL_SYSTICK_Callback>
}
 80007dc:	bd08      	pop	{r3, pc}
	...

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007e4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e8:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000988 <HAL_GPIO_Init+0x1a8>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007ec:	4a64      	ldr	r2, [pc, #400]	; (8000980 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ee:	9301      	str	r3, [sp, #4]
    ioposition = ((uint32_t)0x01U) << position;
 80007f0:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f4:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007f6:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01U) << position;
 80007f8:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fc:	ea04 0607 	and.w	r6, r4, r7
    if(iocurrent == ioposition)
 8000800:	42b7      	cmp	r7, r6
 8000802:	f040 80ad 	bne.w	8000960 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000806:	684c      	ldr	r4, [r1, #4]
 8000808:	f024 0a10 	bic.w	sl, r4, #16
 800080c:	f1ba 0f02 	cmp.w	sl, #2
 8000810:	d116      	bne.n	8000840 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000812:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000816:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800081a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800081e:	f8de 5020 	ldr.w	r5, [lr, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000822:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000826:	f04f 0c0f 	mov.w	ip, #15
 800082a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800082e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000832:	690d      	ldr	r5, [r1, #16]
 8000834:	fa05 f50b 	lsl.w	r5, r5, fp
 8000838:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800083c:	f8ce 5020 	str.w	r5, [lr, #32]
 8000840:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000844:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000846:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800084a:	fa05 f50e 	lsl.w	r5, r5, lr
 800084e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000850:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000854:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000858:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085c:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000860:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000868:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800086a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	d815      	bhi.n	800089c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000870:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000874:	ea05 0c0c 	and.w	ip, r5, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000878:	68cd      	ldr	r5, [r1, #12]
 800087a:	fa05 fa0e 	lsl.w	sl, r5, lr
 800087e:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000882:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000886:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088a:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800088e:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000892:	fa0c fc03 	lsl.w	ip, ip, r3
 8000896:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 800089a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800089c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800089e:	9d00      	ldr	r5, [sp, #0]
 80008a0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008a2:	688f      	ldr	r7, [r1, #8]
 80008a4:	fa07 f70e 	lsl.w	r7, r7, lr
 80008a8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80008aa:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ac:	00e5      	lsls	r5, r4, #3
 80008ae:	d557      	bpl.n	8000960 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b0:	f04f 0b00 	mov.w	fp, #0
 80008b4:	f8cd b00c 	str.w	fp, [sp, #12]
 80008b8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008bc:	4d31      	ldr	r5, [pc, #196]	; (8000984 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80008c2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80008c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80008ca:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80008ce:	9703      	str	r7, [sp, #12]
 80008d0:	9f03      	ldr	r7, [sp, #12]
 80008d2:	f023 0703 	bic.w	r7, r3, #3
 80008d6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80008da:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80008de:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80008e2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80008e6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008ea:	f04f 0c0f 	mov.w	ip, #15
 80008ee:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f2:	42a8      	cmp	r0, r5
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80008f4:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f8:	d039      	beq.n	800096e <HAL_GPIO_Init+0x18e>
 80008fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008fe:	42a8      	cmp	r0, r5
 8000900:	d037      	beq.n	8000972 <HAL_GPIO_Init+0x192>
 8000902:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000906:	42a8      	cmp	r0, r5
 8000908:	d035      	beq.n	8000976 <HAL_GPIO_Init+0x196>
 800090a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800090e:	42a8      	cmp	r0, r5
 8000910:	d033      	beq.n	800097a <HAL_GPIO_Init+0x19a>
 8000912:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000916:	42a8      	cmp	r0, r5
 8000918:	bf14      	ite	ne
 800091a:	2507      	movne	r5, #7
 800091c:	2504      	moveq	r5, #4
 800091e:	fa05 f50e 	lsl.w	r5, r5, lr
 8000922:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000926:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000928:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800092a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800092c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000930:	bf0c      	ite	eq
 8000932:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000934:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000936:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000938:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800093a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800093e:	bf0c      	ite	eq
 8000940:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000942:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000944:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000946:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000948:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800094c:	bf0c      	ite	eq
 800094e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000950:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000952:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000954:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000956:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000958:	bf54      	ite	pl
 800095a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800095c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800095e:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000960:	3301      	adds	r3, #1
 8000962:	2b10      	cmp	r3, #16
 8000964:	f47f af47 	bne.w	80007f6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000968:	b005      	add	sp, #20
 800096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800096e:	465d      	mov	r5, fp
 8000970:	e7d5      	b.n	800091e <HAL_GPIO_Init+0x13e>
 8000972:	2501      	movs	r5, #1
 8000974:	e7d3      	b.n	800091e <HAL_GPIO_Init+0x13e>
 8000976:	2502      	movs	r5, #2
 8000978:	e7d1      	b.n	800091e <HAL_GPIO_Init+0x13e>
 800097a:	2503      	movs	r5, #3
 800097c:	e7cf      	b.n	800091e <HAL_GPIO_Init+0x13e>
 800097e:	bf00      	nop
 8000980:	40013c00 	.word	0x40013c00
 8000984:	40020000 	.word	0x40020000
 8000988:	40023800 	.word	0x40023800

0800098c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800098c:	b10a      	cbz	r2, 8000992 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800098e:	6181      	str	r1, [r0, #24]
  }
}
 8000990:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000992:	0409      	lsls	r1, r1, #16
 8000994:	e7fb      	b.n	800098e <HAL_GPIO_WritePin+0x2>

08000996 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000996:	6943      	ldr	r3, [r0, #20]
 8000998:	4059      	eors	r1, r3
 800099a:	6141      	str	r1, [r0, #20]
}
 800099c:	4770      	bx	lr
	...

080009a0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009a0:	6803      	ldr	r3, [r0, #0]
{
 80009a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80009a4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009a6:	07d8      	lsls	r0, r3, #31
 80009a8:	d43b      	bmi.n	8000a22 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	0799      	lsls	r1, r3, #30
 80009ae:	f100 8086 	bmi.w	8000abe <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	071e      	lsls	r6, r3, #28
 80009b6:	f100 80d1 	bmi.w	8000b5c <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	075d      	lsls	r5, r3, #29
 80009be:	d52a      	bpl.n	8000a16 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	4bb0      	ldr	r3, [pc, #704]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80009c6:	4db1      	ldr	r5, [pc, #708]	; (8000c8c <HAL_RCC_OscConfig+0x2ec>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ce:	641a      	str	r2, [r3, #64]	; 0x40
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e0:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80009e2:	f7ff fc8b 	bl	80002fc <HAL_GetTick>
 80009e6:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	05da      	lsls	r2, r3, #23
 80009ec:	f140 80d8 	bpl.w	8000ba0 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f0:	68a3      	ldr	r3, [r4, #8]
 80009f2:	4da5      	ldr	r5, [pc, #660]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	f040 80da 	bne.w	8000bae <HAL_RCC_OscConfig+0x20e>
 80009fa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a02:	f7ff fc7b 	bl	80002fc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a06:	4da0      	ldr	r5, [pc, #640]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
      tickstart = HAL_GetTick();
 8000a08:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a0a:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a10:	079b      	lsls	r3, r3, #30
 8000a12:	f140 80ed 	bpl.w	8000bf0 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a16:	69a2      	ldr	r2, [r4, #24]
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	f040 80f0 	bne.w	8000bfe <HAL_RCC_OscConfig+0x25e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a1e:	2000      	movs	r0, #0
 8000a20:	e015      	b.n	8000a4e <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a22:	4b99      	ldr	r3, [pc, #612]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	f002 020c 	and.w	r2, r2, #12
 8000a2a:	2a04      	cmp	r2, #4
 8000a2c:	d007      	beq.n	8000a3e <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a34:	2a08      	cmp	r2, #8
 8000a36:	d10c      	bne.n	8000a52 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	025a      	lsls	r2, r3, #9
 8000a3c:	d509      	bpl.n	8000a52 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a3e:	4b92      	ldr	r3, [pc, #584]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	039b      	lsls	r3, r3, #14
 8000a44:	d5b1      	bpl.n	80009aa <HAL_RCC_OscConfig+0xa>
 8000a46:	6863      	ldr	r3, [r4, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1ae      	bne.n	80009aa <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
}
 8000a4e:	b003      	add	sp, #12
 8000a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	4d8c      	ldr	r5, [pc, #560]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
 8000a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a5a:	d111      	bne.n	8000a80 <HAL_RCC_OscConfig+0xe0>
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a64:	f7ff fc4a 	bl	80002fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a68:	4d87      	ldr	r5, [pc, #540]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8000a6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	039f      	lsls	r7, r3, #14
 8000a70:	d49b      	bmi.n	80009aa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a72:	f7ff fc43 	bl	80002fc <HAL_GetTick>
 8000a76:	1b80      	subs	r0, r0, r6
 8000a78:	2864      	cmp	r0, #100	; 0x64
 8000a7a:	d9f7      	bls.n	8000a6c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	e7e6      	b.n	8000a4e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a84:	d104      	bne.n	8000a90 <HAL_RCC_OscConfig+0xf0>
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	602b      	str	r3, [r5, #0]
 8000a8e:	e7e5      	b.n	8000a5c <HAL_RCC_OscConfig+0xbc>
 8000a90:	682a      	ldr	r2, [r5, #0]
 8000a92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a96:	602a      	str	r2, [r5, #0]
 8000a98:	682a      	ldr	r2, [r5, #0]
 8000a9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a9e:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1df      	bne.n	8000a64 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fc2a 	bl	80002fc <HAL_GetTick>
 8000aa8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aaa:	682b      	ldr	r3, [r5, #0]
 8000aac:	0398      	lsls	r0, r3, #14
 8000aae:	f57f af7c 	bpl.w	80009aa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ab2:	f7ff fc23 	bl	80002fc <HAL_GetTick>
 8000ab6:	1b80      	subs	r0, r0, r6
 8000ab8:	2864      	cmp	r0, #100	; 0x64
 8000aba:	d9f6      	bls.n	8000aaa <HAL_RCC_OscConfig+0x10a>
 8000abc:	e7de      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000abe:	4b72      	ldr	r3, [pc, #456]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	f012 0f0c 	tst.w	r2, #12
 8000ac6:	d007      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ace:	2a08      	cmp	r2, #8
 8000ad0:	d116      	bne.n	8000b00 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	0259      	lsls	r1, r3, #9
 8000ad6:	d413      	bmi.n	8000b00 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ad8:	4b6b      	ldr	r3, [pc, #428]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	0792      	lsls	r2, r2, #30
 8000ade:	d502      	bpl.n	8000ae6 <HAL_RCC_OscConfig+0x146>
 8000ae0:	68e2      	ldr	r2, [r4, #12]
 8000ae2:	2a01      	cmp	r2, #1
 8000ae4:	d1b2      	bne.n	8000a4c <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	22f8      	movs	r2, #248	; 0xf8
 8000aea:	fa92 f2a2 	rbit	r2, r2
 8000aee:	fab2 f182 	clz	r1, r2
 8000af2:	6922      	ldr	r2, [r4, #16]
 8000af4:	408a      	lsls	r2, r1
 8000af6:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000afe:	e758      	b.n	80009b2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b00:	68e2      	ldr	r2, [r4, #12]
 8000b02:	4b63      	ldr	r3, [pc, #396]	; (8000c90 <HAL_RCC_OscConfig+0x2f0>)
 8000b04:	b1da      	cbz	r2, 8000b3e <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b0a:	f7ff fbf7 	bl	80002fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0e:	4d5e      	ldr	r5, [pc, #376]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8000b10:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	079b      	lsls	r3, r3, #30
 8000b16:	d50c      	bpl.n	8000b32 <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b18:	6829      	ldr	r1, [r5, #0]
 8000b1a:	23f8      	movs	r3, #248	; 0xf8
 8000b1c:	fa93 f3a3 	rbit	r3, r3
 8000b20:	fab3 f283 	clz	r2, r3
 8000b24:	6923      	ldr	r3, [r4, #16]
 8000b26:	4093      	lsls	r3, r2
 8000b28:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	602b      	str	r3, [r5, #0]
 8000b30:	e73f      	b.n	80009b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b32:	f7ff fbe3 	bl	80002fc <HAL_GetTick>
 8000b36:	1b80      	subs	r0, r0, r6
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	d9ea      	bls.n	8000b12 <HAL_RCC_OscConfig+0x172>
 8000b3c:	e79e      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8000b3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b40:	f7ff fbdc 	bl	80002fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b44:	4d50      	ldr	r5, [pc, #320]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8000b46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	079f      	lsls	r7, r3, #30
 8000b4c:	f57f af31 	bpl.w	80009b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b50:	f7ff fbd4 	bl	80002fc <HAL_GetTick>
 8000b54:	1b80      	subs	r0, r0, r6
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d9f6      	bls.n	8000b48 <HAL_RCC_OscConfig+0x1a8>
 8000b5a:	e78f      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b5c:	6962      	ldr	r2, [r4, #20]
 8000b5e:	4b4d      	ldr	r3, [pc, #308]	; (8000c94 <HAL_RCC_OscConfig+0x2f4>)
 8000b60:	b17a      	cbz	r2, 8000b82 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b66:	f7ff fbc9 	bl	80002fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6a:	4d47      	ldr	r5, [pc, #284]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
      tickstart = HAL_GetTick();
 8000b6c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b70:	0798      	lsls	r0, r3, #30
 8000b72:	f53f af22 	bmi.w	80009ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b76:	f7ff fbc1 	bl	80002fc <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9f6      	bls.n	8000b6e <HAL_RCC_OscConfig+0x1ce>
 8000b80:	e77c      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8000b82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b84:	f7ff fbba 	bl	80002fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b88:	4d3f      	ldr	r5, [pc, #252]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
      tickstart = HAL_GetTick();
 8000b8a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b8e:	0799      	lsls	r1, r3, #30
 8000b90:	f57f af13 	bpl.w	80009ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b94:	f7ff fbb2 	bl	80002fc <HAL_GetTick>
 8000b98:	1b80      	subs	r0, r0, r6
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x1ec>
 8000b9e:	e76d      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ba0:	f7ff fbac 	bl	80002fc <HAL_GetTick>
 8000ba4:	1b80      	subs	r0, r0, r6
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	f67f af1e 	bls.w	80009e8 <HAL_RCC_OscConfig+0x48>
 8000bac:	e766      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bae:	2b05      	cmp	r3, #5
 8000bb0:	d104      	bne.n	8000bbc <HAL_RCC_OscConfig+0x21c>
 8000bb2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	672b      	str	r3, [r5, #112]	; 0x70
 8000bba:	e71e      	b.n	80009fa <HAL_RCC_OscConfig+0x5a>
 8000bbc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bbe:	f022 0201 	bic.w	r2, r2, #1
 8000bc2:	672a      	str	r2, [r5, #112]	; 0x70
 8000bc4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bc6:	f022 0204 	bic.w	r2, r2, #4
 8000bca:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f47f af18 	bne.w	8000a02 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fb93 	bl	80002fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bd6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bde:	0798      	lsls	r0, r3, #30
 8000be0:	f57f af19 	bpl.w	8000a16 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be4:	f7ff fb8a 	bl	80002fc <HAL_GetTick>
 8000be8:	1b80      	subs	r0, r0, r6
 8000bea:	42b8      	cmp	r0, r7
 8000bec:	d9f6      	bls.n	8000bdc <HAL_RCC_OscConfig+0x23c>
 8000bee:	e745      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fb84 	bl	80002fc <HAL_GetTick>
 8000bf4:	1b80      	subs	r0, r0, r6
 8000bf6:	42b8      	cmp	r0, r7
 8000bf8:	f67f af09 	bls.w	8000a0e <HAL_RCC_OscConfig+0x6e>
 8000bfc:	e73e      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000bfe:	4d22      	ldr	r5, [pc, #136]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
 8000c00:	68ab      	ldr	r3, [r5, #8]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	f43f af20 	beq.w	8000a4c <HAL_RCC_OscConfig+0xac>
 8000c0c:	4e22      	ldr	r6, [pc, #136]	; (8000c98 <HAL_RCC_OscConfig+0x2f8>)
 8000c0e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c10:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000c12:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c14:	d148      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8000c16:	f7ff fb71 	bl	80002fc <HAL_GetTick>
 8000c1a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c1c:	682b      	ldr	r3, [r5, #0]
 8000c1e:	0199      	lsls	r1, r3, #6
 8000c20:	d43c      	bmi.n	8000c9c <HAL_RCC_OscConfig+0x2fc>
 8000c22:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8000c26:	fa97 f7a7 	rbit	r7, r7
 8000c2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c2e:	fab7 f787 	clz	r7, r7
 8000c32:	fa92 f2a2 	rbit	r2, r2
 8000c36:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000c3a:	fab2 f082 	clz	r0, r2
 8000c3e:	fa91 f1a1 	rbit	r1, r1
 8000c42:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c4a:	fa02 f707 	lsl.w	r7, r2, r7
 8000c4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c50:	0852      	lsrs	r2, r2, #1
 8000c52:	3a01      	subs	r2, #1
 8000c54:	4082      	lsls	r2, r0
 8000c56:	433b      	orrs	r3, r7
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <HAL_RCC_OscConfig+0x2e8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c5e:	fab1 f181 	clz	r1, r1
 8000c62:	fa02 f101 	lsl.w	r1, r2, r1
 8000c66:	430b      	orrs	r3, r1
 8000c68:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fb45 	bl	80002fc <HAL_GetTick>
 8000c72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	019a      	lsls	r2, r3, #6
 8000c78:	f53f aed1 	bmi.w	8000a1e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7c:	f7ff fb3e 	bl	80002fc <HAL_GetTick>
 8000c80:	1b40      	subs	r0, r0, r5
 8000c82:	2802      	cmp	r0, #2
 8000c84:	d9f6      	bls.n	8000c74 <HAL_RCC_OscConfig+0x2d4>
 8000c86:	e6f9      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	42470000 	.word	0x42470000
 8000c94:	42470e80 	.word	0x42470e80
 8000c98:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c9c:	f7ff fb2e 	bl	80002fc <HAL_GetTick>
 8000ca0:	1bc0      	subs	r0, r0, r7
 8000ca2:	2802      	cmp	r0, #2
 8000ca4:	d9ba      	bls.n	8000c1c <HAL_RCC_OscConfig+0x27c>
 8000ca6:	e6e9      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fb28 	bl	80002fc <HAL_GetTick>
 8000cac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cae:	682b      	ldr	r3, [r5, #0]
 8000cb0:	019b      	lsls	r3, r3, #6
 8000cb2:	f57f aeb4 	bpl.w	8000a1e <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb6:	f7ff fb21 	bl	80002fc <HAL_GetTick>
 8000cba:	1b00      	subs	r0, r0, r4
 8000cbc:	2802      	cmp	r0, #2
 8000cbe:	d9f6      	bls.n	8000cae <HAL_RCC_OscConfig+0x30e>
 8000cc0:	e6dc      	b.n	8000a7c <HAL_RCC_OscConfig+0xdc>
 8000cc2:	bf00      	nop

08000cc4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_RCC_GetSysClockFreq+0x68>)
 8000cc6:	6893      	ldr	r3, [r2, #8]
 8000cc8:	f003 030c 	and.w	r3, r3, #12
 8000ccc:	2b04      	cmp	r3, #4
{
 8000cce:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cd0:	d003      	beq.n	8000cda <HAL_RCC_GetSysClockFreq+0x16>
 8000cd2:	2b08      	cmp	r3, #8
 8000cd4:	d003      	beq.n	8000cde <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <HAL_RCC_GetSysClockFreq+0x6c>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8000cd8:	e000      	b.n	8000cdc <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8000cda:	4816      	ldr	r0, [pc, #88]	; (8000d34 <HAL_RCC_GetSysClockFreq+0x70>)
}
 8000cdc:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cde:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ce0:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ce2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ce6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000cea:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000cee:	6853      	ldr	r3, [r2, #4]
 8000cf0:	fa94 f0a4 	rbit	r0, r4
 8000cf4:	fab0 f080 	clz	r0, r0
 8000cf8:	ea03 0304 	and.w	r3, r3, r4
 8000cfc:	fa23 f300 	lsr.w	r3, r3, r0
 8000d00:	bf14      	ite	ne
 8000d02:	480c      	ldrne	r0, [pc, #48]	; (8000d34 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000d04:	480a      	ldreq	r0, [pc, #40]	; (8000d30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000d06:	fbb0 f0f1 	udiv	r0, r0, r1
 8000d0a:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <HAL_RCC_GetSysClockFreq+0x68>)
 8000d0e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	fa92 f2a2 	rbit	r2, r2
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d20:	40d3      	lsrs	r3, r2
 8000d22:	3301      	adds	r3, #1
 8000d24:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000d26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d2a:	e7d7      	b.n	8000cdc <HAL_RCC_GetSysClockFreq+0x18>
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	00f42400 	.word	0x00f42400
 8000d34:	007a1200 	.word	0x007a1200

08000d38 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d38:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <HAL_RCC_ClockConfig+0x158>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	f002 020f 	and.w	r2, r2, #15
 8000d40:	428a      	cmp	r2, r1
{
 8000d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d46:	4605      	mov	r5, r0
 8000d48:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d4a:	d32f      	bcc.n	8000dac <HAL_RCC_ClockConfig+0x74>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4c:	682a      	ldr	r2, [r5, #0]
 8000d4e:	0794      	lsls	r4, r2, #30
 8000d50:	d436      	bmi.n	8000dc0 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d52:	07d0      	lsls	r0, r2, #31
 8000d54:	d43c      	bmi.n	8000dd0 <HAL_RCC_ClockConfig+0x98>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d56:	4b4e      	ldr	r3, [pc, #312]	; (8000e90 <HAL_RCC_ClockConfig+0x158>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f002 020f 	and.w	r2, r2, #15
 8000d5e:	42b2      	cmp	r2, r6
 8000d60:	f200 8086 	bhi.w	8000e70 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d64:	682a      	ldr	r2, [r5, #0]
 8000d66:	0751      	lsls	r1, r2, #29
 8000d68:	f100 808a 	bmi.w	8000e80 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6c:	0713      	lsls	r3, r2, #28
 8000d6e:	d507      	bpl.n	8000d80 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d70:	4a48      	ldr	r2, [pc, #288]	; (8000e94 <HAL_RCC_ClockConfig+0x15c>)
 8000d72:	6929      	ldr	r1, [r5, #16]
 8000d74:	6893      	ldr	r3, [r2, #8]
 8000d76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000d80:	f7ff ffa0 	bl	8000cc4 <HAL_RCC_GetSysClockFreq>
 8000d84:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <HAL_RCC_ClockConfig+0x15c>)
 8000d86:	22f0      	movs	r2, #240	; 0xf0
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	fa92 f2a2 	rbit	r2, r2
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	4a3f      	ldr	r2, [pc, #252]	; (8000e98 <HAL_RCC_ClockConfig+0x160>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	40d8      	lsrs	r0, r3
 8000d9e:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000da0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fa74 	bl	8000290 <HAL_InitTick>
  return HAL_OK;
 8000da8:	2000      	movs	r0, #0
 8000daa:	e007      	b.n	8000dbc <HAL_RCC_ClockConfig+0x84>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dac:	b2ca      	uxtb	r2, r1
 8000dae:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d0c8      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000dba:	2001      	movs	r0, #1
}
 8000dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc0:	4934      	ldr	r1, [pc, #208]	; (8000e94 <HAL_RCC_ClockConfig+0x15c>)
 8000dc2:	68a8      	ldr	r0, [r5, #8]
 8000dc4:	688b      	ldr	r3, [r1, #8]
 8000dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000dca:	4303      	orrs	r3, r0
 8000dcc:	608b      	str	r3, [r1, #8]
 8000dce:	e7c0      	b.n	8000d52 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd0:	686a      	ldr	r2, [r5, #4]
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_RCC_ClockConfig+0x15c>)
 8000dd4:	2a01      	cmp	r2, #1
 8000dd6:	d11d      	bne.n	8000e14 <HAL_RCC_ClockConfig+0xdc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dde:	d0ec      	beq.n	8000dba <HAL_RCC_ClockConfig+0x82>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de0:	4c2c      	ldr	r4, [pc, #176]	; (8000e94 <HAL_RCC_ClockConfig+0x15c>)
 8000de2:	68a3      	ldr	r3, [r4, #8]
 8000de4:	f023 0303 	bic.w	r3, r3, #3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000dec:	f7ff fa86 	bl	80002fc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df0:	686b      	ldr	r3, [r5, #4]
 8000df2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000df4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000df6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dfa:	d115      	bne.n	8000e28 <HAL_RCC_ClockConfig+0xf0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfc:	68a3      	ldr	r3, [r4, #8]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d0a7      	beq.n	8000d56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e06:	f7ff fa79 	bl	80002fc <HAL_GetTick>
 8000e0a:	1bc0      	subs	r0, r0, r7
 8000e0c:	4540      	cmp	r0, r8
 8000e0e:	d9f5      	bls.n	8000dfc <HAL_RCC_ClockConfig+0xc4>
          return HAL_TIMEOUT;
 8000e10:	2003      	movs	r0, #3
 8000e12:	e7d3      	b.n	8000dbc <HAL_RCC_ClockConfig+0x84>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e14:	1e91      	subs	r1, r2, #2
 8000e16:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e18:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e1a:	d802      	bhi.n	8000e22 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e20:	e7dd      	b.n	8000dde <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e22:	f013 0f02 	tst.w	r3, #2
 8000e26:	e7da      	b.n	8000dde <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d10a      	bne.n	8000e42 <HAL_RCC_ClockConfig+0x10a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e2c:	68a3      	ldr	r3, [r4, #8]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d08f      	beq.n	8000d56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e36:	f7ff fa61 	bl	80002fc <HAL_GetTick>
 8000e3a:	1bc0      	subs	r0, r0, r7
 8000e3c:	4540      	cmp	r0, r8
 8000e3e:	d9f5      	bls.n	8000e2c <HAL_RCC_ClockConfig+0xf4>
 8000e40:	e7e6      	b.n	8000e10 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d10f      	bne.n	8000e66 <HAL_RCC_ClockConfig+0x12e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000e46:	68a3      	ldr	r3, [r4, #8]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b0c      	cmp	r3, #12
 8000e4e:	d082      	beq.n	8000d56 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e50:	f7ff fa54 	bl	80002fc <HAL_GetTick>
 8000e54:	1bc0      	subs	r0, r0, r7
 8000e56:	4540      	cmp	r0, r8
 8000e58:	d9f5      	bls.n	8000e46 <HAL_RCC_ClockConfig+0x10e>
 8000e5a:	e7d9      	b.n	8000e10 <HAL_RCC_ClockConfig+0xd8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e5c:	f7ff fa4e 	bl	80002fc <HAL_GetTick>
 8000e60:	1bc0      	subs	r0, r0, r7
 8000e62:	4540      	cmp	r0, r8
 8000e64:	d8d4      	bhi.n	8000e10 <HAL_RCC_ClockConfig+0xd8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e66:	68a3      	ldr	r3, [r4, #8]
 8000e68:	f013 0f0c 	tst.w	r3, #12
 8000e6c:	d1f6      	bne.n	8000e5c <HAL_RCC_ClockConfig+0x124>
 8000e6e:	e772      	b.n	8000d56 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e70:	b2f2      	uxtb	r2, r6
 8000e72:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	42b3      	cmp	r3, r6
 8000e7c:	d19d      	bne.n	8000dba <HAL_RCC_ClockConfig+0x82>
 8000e7e:	e771      	b.n	8000d64 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e80:	4904      	ldr	r1, [pc, #16]	; (8000e94 <HAL_RCC_ClockConfig+0x15c>)
 8000e82:	68e8      	ldr	r0, [r5, #12]
 8000e84:	688b      	ldr	r3, [r1, #8]
 8000e86:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e8a:	4303      	orrs	r3, r0
 8000e8c:	608b      	str	r3, [r1, #8]
 8000e8e:	e76d      	b.n	8000d6c <HAL_RCC_ClockConfig+0x34>
 8000e90:	40023c00 	.word	0x40023c00
 8000e94:	40023800 	.word	0x40023800
 8000e98:	080023b8 	.word	0x080023b8
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ea0:	4b01      	ldr	r3, [pc, #4]	; (8000ea8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000

08000eac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000eae:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	fa92 f2a2 	rbit	r2, r2
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000ec0:	40d3      	lsrs	r3, r2
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000ec8:	6810      	ldr	r0, [r2, #0]
}
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	080023b8 	.word	0x080023b8
 8000ed8:	20000000 	.word	0x20000000

08000edc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ede:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	fa92 f2a2 	rbit	r2, r2
 8000ee8:	fab2 f282 	clz	r2, r2
 8000eec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ef0:	40d3      	lsrs	r3, r2
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ef8:	6810      	ldr	r0, [r2, #0]
} 
 8000efa:	40d8      	lsrs	r0, r3
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	080023b8 	.word	0x080023b8
 8000f08:	20000000 	.word	0x20000000

08000f0c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	f042 0201 	orr.w	r2, r2, #1
 8000f14:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	f042 0201 	orr.w	r2, r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000f1e:	2000      	movs	r0, #0
 8000f20:	4770      	bx	lr

08000f22 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000f22:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f26:	2b01      	cmp	r3, #1
{
 8000f28:	b570      	push	{r4, r5, r6, lr}
 8000f2a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f2e:	d01c      	beq.n	8000f6a <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000f30:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000f34:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000f3c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f3e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f42:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000f46:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000f48:	680a      	ldr	r2, [r1, #0]
 8000f4a:	2a40      	cmp	r2, #64	; 0x40
 8000f4c:	d079      	beq.n	8001042 <HAL_TIM_ConfigClockSource+0x120>
 8000f4e:	d819      	bhi.n	8000f84 <HAL_TIM_ConfigClockSource+0x62>
 8000f50:	2a10      	cmp	r2, #16
 8000f52:	f000 8093 	beq.w	800107c <HAL_TIM_ConfigClockSource+0x15a>
 8000f56:	d80a      	bhi.n	8000f6e <HAL_TIM_ConfigClockSource+0x4c>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	f000 8089 	beq.w	8001070 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000f64:	2300      	movs	r3, #0
 8000f66:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f6a:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8000f6c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000f6e:	2a20      	cmp	r2, #32
 8000f70:	f000 808a 	beq.w	8001088 <HAL_TIM_ConfigClockSource+0x166>
 8000f74:	2a30      	cmp	r2, #48	; 0x30
 8000f76:	d1f2      	bne.n	8000f5e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f78:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f7e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000f82:	e036      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f84:	2a70      	cmp	r2, #112	; 0x70
 8000f86:	d036      	beq.n	8000ff6 <HAL_TIM_ConfigClockSource+0xd4>
 8000f88:	d81b      	bhi.n	8000fc2 <HAL_TIM_ConfigClockSource+0xa0>
 8000f8a:	2a50      	cmp	r2, #80	; 0x50
 8000f8c:	d042      	beq.n	8001014 <HAL_TIM_ConfigClockSource+0xf2>
 8000f8e:	2a60      	cmp	r2, #96	; 0x60
 8000f90:	d1e5      	bne.n	8000f5e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f92:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000f94:	684d      	ldr	r5, [r1, #4]
 8000f96:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f98:	f024 0410 	bic.w	r4, r4, #16
 8000f9c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f9e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000fa0:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000fa2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000fa6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000faa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000fae:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000fb2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000fb4:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000fb6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000fbc:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000fc0:	e017      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000fc2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000fc6:	d011      	beq.n	8000fec <HAL_TIM_ConfigClockSource+0xca>
 8000fc8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000fcc:	d1c7      	bne.n	8000f5e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fce:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000fd2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fd4:	68c9      	ldr	r1, [r1, #12]
 8000fd6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fd8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fe0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fe2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fea:	e002      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	e7b3      	b.n	8000f5e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000ff6:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000ffa:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000ffc:	68c9      	ldr	r1, [r1, #12]
 8000ffe:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001000:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001004:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001008:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800100a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800100c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800100e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001012:	e7ee      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001014:	684c      	ldr	r4, [r1, #4]
 8001016:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001018:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800101a:	6a1d      	ldr	r5, [r3, #32]
 800101c:	f025 0501 	bic.w	r5, r5, #1
 8001020:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001022:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001024:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001028:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800102c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001030:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001034:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001036:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001038:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800103c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001040:	e7d7      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001042:	684c      	ldr	r4, [r1, #4]
 8001044:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001046:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001048:	6a1d      	ldr	r5, [r3, #32]
 800104a:	f025 0501 	bic.w	r5, r5, #1
 800104e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001050:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001052:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001056:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800105a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800105e:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001062:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001064:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001066:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800106a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800106e:	e7c0      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001070:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001072:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001076:	f042 0207 	orr.w	r2, r2, #7
 800107a:	e7ba      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800107c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800107e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001082:	f042 0217 	orr.w	r2, r2, #23
 8001086:	e7b4      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001088:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800108a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800108e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001092:	e7ae      	b.n	8000ff2 <HAL_TIM_ConfigClockSource+0xd0>

08001094 <HAL_TIM_OC_DelayElapsedCallback>:
 8001094:	4770      	bx	lr

08001096 <HAL_TIM_IC_CaptureCallback>:
 8001096:	4770      	bx	lr

08001098 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001098:	4770      	bx	lr

0800109a <HAL_TIM_TriggerCallback>:
 800109a:	4770      	bx	lr

0800109c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800109c:	6803      	ldr	r3, [r0, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	0791      	lsls	r1, r2, #30
{
 80010a2:	b510      	push	{r4, lr}
 80010a4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80010a6:	d50e      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	0792      	lsls	r2, r2, #30
 80010ac:	d50b      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80010ae:	f06f 0202 	mvn.w	r2, #2
 80010b2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010b4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010b6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010b8:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010ba:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010bc:	d077      	beq.n	80011ae <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80010be:	f7ff ffea 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c2:	2300      	movs	r3, #0
 80010c4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	0750      	lsls	r0, r2, #29
 80010cc:	d510      	bpl.n	80010f0 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	0751      	lsls	r1, r2, #29
 80010d2:	d50d      	bpl.n	80010f0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010d4:	f06f 0204 	mvn.w	r2, #4
 80010d8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010da:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010dc:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010de:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010e2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80010e4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010e6:	d068      	beq.n	80011ba <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80010e8:	f7ff ffd5 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ec:	2300      	movs	r3, #0
 80010ee:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	0712      	lsls	r2, r2, #28
 80010f6:	d50f      	bpl.n	8001118 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	0710      	lsls	r0, r2, #28
 80010fc:	d50c      	bpl.n	8001118 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010fe:	f06f 0208 	mvn.w	r2, #8
 8001102:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001104:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001106:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001108:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800110a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800110c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800110e:	d05a      	beq.n	80011c6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001110:	f7ff ffc1 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001114:	2300      	movs	r3, #0
 8001116:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	06d2      	lsls	r2, r2, #27
 800111e:	d510      	bpl.n	8001142 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	06d0      	lsls	r0, r2, #27
 8001124:	d50d      	bpl.n	8001142 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001126:	f06f 0210 	mvn.w	r2, #16
 800112a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800112c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800112e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001130:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001134:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001136:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001138:	d04b      	beq.n	80011d2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800113a:	f7ff ffac 	bl	8001096 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800113e:	2300      	movs	r3, #0
 8001140:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	07d1      	lsls	r1, r2, #31
 8001148:	d508      	bpl.n	800115c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	07d2      	lsls	r2, r2, #31
 800114e:	d505      	bpl.n	800115c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001150:	f06f 0201 	mvn.w	r2, #1
 8001154:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001156:	4620      	mov	r0, r4
 8001158:	f000 fbd2 	bl	8001900 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	0610      	lsls	r0, r2, #24
 8001162:	d508      	bpl.n	8001176 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	0611      	lsls	r1, r2, #24
 8001168:	d505      	bpl.n	8001176 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800116a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800116e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001170:	4620      	mov	r0, r4
 8001172:	f000 f8bc 	bl	80012ee <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	0652      	lsls	r2, r2, #25
 800117c:	d508      	bpl.n	8001190 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	0650      	lsls	r0, r2, #25
 8001182:	d505      	bpl.n	8001190 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001188:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff ff85 	bl	800109a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001190:	6823      	ldr	r3, [r4, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	0691      	lsls	r1, r2, #26
 8001196:	d522      	bpl.n	80011de <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	0692      	lsls	r2, r2, #26
 800119c:	d51f      	bpl.n	80011de <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800119e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80011a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80011a4:	611a      	str	r2, [r3, #16]
}
 80011a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80011aa:	f000 b89f 	b.w	80012ec <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ae:	f7ff ff71 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff ff70 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011b8:	e783      	b.n	80010c2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ba:	f7ff ff6b 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff ff6a 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011c4:	e792      	b.n	80010ec <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011c6:	f7ff ff65 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff ff64 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011d0:	e7a0      	b.n	8001114 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011d2:	f7ff ff5f 	bl	8001094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d6:	4620      	mov	r0, r4
 80011d8:	f7ff ff5e 	bl	8001098 <HAL_TIM_PWM_PulseFinishedCallback>
 80011dc:	e7af      	b.n	800113e <HAL_TIM_IRQHandler+0xa2>
}
 80011de:	bd10      	pop	{r4, pc}

080011e0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 80011e2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d00e      	beq.n	8001206 <TIM_Base_SetConfig+0x26>
 80011e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011ec:	d00b      	beq.n	8001206 <TIM_Base_SetConfig+0x26>
 80011ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011f2:	4290      	cmp	r0, r2
 80011f4:	d007      	beq.n	8001206 <TIM_Base_SetConfig+0x26>
 80011f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fa:	4290      	cmp	r0, r2
 80011fc:	d003      	beq.n	8001206 <TIM_Base_SetConfig+0x26>
 80011fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001202:	4290      	cmp	r0, r2
 8001204:	d115      	bne.n	8001232 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001206:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800120c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <TIM_Base_SetConfig+0x8c>)
 8001210:	4290      	cmp	r0, r2
 8001212:	d019      	beq.n	8001248 <TIM_Base_SetConfig+0x68>
 8001214:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001218:	d016      	beq.n	8001248 <TIM_Base_SetConfig+0x68>
 800121a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800121e:	4290      	cmp	r0, r2
 8001220:	d012      	beq.n	8001248 <TIM_Base_SetConfig+0x68>
 8001222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001226:	4290      	cmp	r0, r2
 8001228:	d00e      	beq.n	8001248 <TIM_Base_SetConfig+0x68>
 800122a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122e:	4290      	cmp	r0, r2
 8001230:	d00a      	beq.n	8001248 <TIM_Base_SetConfig+0x68>
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <TIM_Base_SetConfig+0x90>)
 8001234:	4290      	cmp	r0, r2
 8001236:	d007      	beq.n	8001248 <TIM_Base_SetConfig+0x68>
 8001238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800123c:	4290      	cmp	r0, r2
 800123e:	d003      	beq.n	8001248 <TIM_Base_SetConfig+0x68>
 8001240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001244:	4290      	cmp	r0, r2
 8001246:	d103      	bne.n	8001250 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001248:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800124a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800124e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001250:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001252:	688b      	ldr	r3, [r1, #8]
 8001254:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001256:	680b      	ldr	r3, [r1, #0]
 8001258:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <TIM_Base_SetConfig+0x8c>)
 800125c:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800125e:	bf04      	itt	eq
 8001260:	690b      	ldreq	r3, [r1, #16]
 8001262:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001264:	2301      	movs	r3, #1
 8001266:	6143      	str	r3, [r0, #20]
}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40010000 	.word	0x40010000
 8001270:	40014000 	.word	0x40014000

08001274 <HAL_TIM_Base_Init>:
{ 
 8001274:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001276:	4604      	mov	r4, r0
 8001278:	b1a0      	cbz	r0, 80012a4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800127a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800127e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001282:	b91b      	cbnz	r3, 800128c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001284:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001288:	f000 fba2 	bl	80019d0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800128c:	2302      	movs	r3, #2
 800128e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001292:	6820      	ldr	r0, [r4, #0]
 8001294:	1d21      	adds	r1, r4, #4
 8001296:	f7ff ffa3 	bl	80011e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800129a:	2301      	movs	r3, #1
 800129c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80012a0:	2000      	movs	r0, #0
}
 80012a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
 80012a6:	e7fc      	b.n	80012a2 <HAL_TIM_Base_Init+0x2e>

080012a8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80012a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012ac:	2b01      	cmp	r3, #1
{
 80012ae:	b510      	push	{r4, lr}
 80012b0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80012b4:	d018      	beq.n	80012e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80012b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012ba:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80012bc:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012be:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012c0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012c6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4322      	orrs	r2, r4
 80012cc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	430a      	orrs	r2, r1
 80012da:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80012dc:	2301      	movs	r3, #1
 80012de:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80012e2:	2300      	movs	r3, #0
 80012e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80012e8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80012ea:	bd10      	pop	{r4, pc}

080012ec <HAL_TIMEx_CommutationCallback>:
 80012ec:	4770      	bx	lr

080012ee <HAL_TIMEx_BreakCallback>:
 80012ee:	4770      	bx	lr

080012f0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80012f4:	6803      	ldr	r3, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80012f6:	68c1      	ldr	r1, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80012f8:	691a      	ldr	r2, [r3, #16]
{
 80012fa:	4604      	mov	r4, r0
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80012fc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001300:	430a      	orrs	r2, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001302:	611a      	str	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001304:	6925      	ldr	r5, [r4, #16]
 8001306:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8001308:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800130a:	69c0      	ldr	r0, [r0, #28]
 800130c:	432a      	orrs	r2, r5
 800130e:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001310:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001314:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001316:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800131a:	4302      	orrs	r2, r0
 800131c:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800131e:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001320:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001322:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001324:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001328:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800132a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	4a7a      	ldr	r2, [pc, #488]	; (800151c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001332:	d17b      	bne.n	800142c <UART_SetConfig+0x13c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001334:	4293      	cmp	r3, r2
 8001336:	d003      	beq.n	8001340 <UART_SetConfig+0x50>
 8001338:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800133c:	4293      	cmp	r3, r2
 800133e:	d144      	bne.n	80013ca <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001340:	f7ff fdcc 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 8001344:	6867      	ldr	r7, [r4, #4]
 8001346:	2519      	movs	r5, #25
 8001348:	f04f 0864 	mov.w	r8, #100	; 0x64
 800134c:	fb05 f300 	mul.w	r3, r5, r0
 8001350:	007f      	lsls	r7, r7, #1
 8001352:	fbb3 f3f7 	udiv	r3, r3, r7
 8001356:	fbb3 f3f8 	udiv	r3, r3, r8
 800135a:	011f      	lsls	r7, r3, #4
 800135c:	f7ff fdbe 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	4368      	muls	r0, r5
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fbb0 f6f3 	udiv	r6, r0, r3
 800136a:	f7ff fdb7 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 800136e:	6863      	ldr	r3, [r4, #4]
 8001370:	4368      	muls	r0, r5
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fbb0 f3f3 	udiv	r3, r0, r3
 8001378:	fbb3 f3f8 	udiv	r3, r3, r8
 800137c:	fb08 6313 	mls	r3, r8, r3, r6
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	3332      	adds	r3, #50	; 0x32
 8001384:	fbb3 f3f8 	udiv	r3, r3, r8
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800138e:	f7ff fda5 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 8001392:	6862      	ldr	r2, [r4, #4]
 8001394:	4368      	muls	r0, r5
 8001396:	0052      	lsls	r2, r2, #1
 8001398:	fbb0 f9f2 	udiv	r9, r0, r2
 800139c:	f7ff fd9e 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013a0:	6863      	ldr	r3, [r4, #4]
 80013a2:	6822      	ldr	r2, [r4, #0]
 80013a4:	4368      	muls	r0, r5
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80013b0:	fb08 9313 	mls	r3, r8, r3, r9
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	3332      	adds	r3, #50	; 0x32
 80013b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	443b      	add	r3, r7
 80013c2:	4433      	add	r3, r6
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013c4:	6093      	str	r3, [r2, #8]
    }
  }
}
 80013c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013ca:	f7ff fd6f 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 80013ce:	6867      	ldr	r7, [r4, #4]
 80013d0:	2519      	movs	r5, #25
 80013d2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80013d6:	fb05 f300 	mul.w	r3, r5, r0
 80013da:	007f      	lsls	r7, r7, #1
 80013dc:	fbb3 f3f7 	udiv	r3, r3, r7
 80013e0:	fbb3 f3f8 	udiv	r3, r3, r8
 80013e4:	011f      	lsls	r7, r3, #4
 80013e6:	f7ff fd61 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 80013ea:	6863      	ldr	r3, [r4, #4]
 80013ec:	4368      	muls	r0, r5
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fbb0 f6f3 	udiv	r6, r0, r3
 80013f4:	f7ff fd5a 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	4368      	muls	r0, r5
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001402:	fbb3 f3f8 	udiv	r3, r3, r8
 8001406:	fb08 6313 	mls	r3, r8, r3, r6
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	3332      	adds	r3, #50	; 0x32
 800140e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001418:	f7ff fd48 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 800141c:	6862      	ldr	r2, [r4, #4]
 800141e:	4368      	muls	r0, r5
 8001420:	0052      	lsls	r2, r2, #1
 8001422:	fbb0 f9f2 	udiv	r9, r0, r2
 8001426:	f7ff fd41 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 800142a:	e7b9      	b.n	80013a0 <UART_SetConfig+0xb0>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800142c:	4293      	cmp	r3, r2
 800142e:	d002      	beq.n	8001436 <UART_SetConfig+0x146>
 8001430:	4a3b      	ldr	r2, [pc, #236]	; (8001520 <UART_SetConfig+0x230>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d141      	bne.n	80014ba <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001436:	f7ff fd51 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 800143a:	6867      	ldr	r7, [r4, #4]
 800143c:	2519      	movs	r5, #25
 800143e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001442:	fb05 f300 	mul.w	r3, r5, r0
 8001446:	00bf      	lsls	r7, r7, #2
 8001448:	fbb3 f3f7 	udiv	r3, r3, r7
 800144c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001450:	011f      	lsls	r7, r3, #4
 8001452:	f7ff fd43 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	4368      	muls	r0, r5
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fbb0 f6f3 	udiv	r6, r0, r3
 8001460:	f7ff fd3c 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 8001464:	6863      	ldr	r3, [r4, #4]
 8001466:	4368      	muls	r0, r5
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	fbb0 f3f3 	udiv	r3, r0, r3
 800146e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001472:	fb08 6313 	mls	r3, r8, r3, r6
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	3332      	adds	r3, #50	; 0x32
 800147a:	fbb3 f3f8 	udiv	r3, r3, r8
 800147e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001482:	f7ff fd2b 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
 8001486:	6862      	ldr	r2, [r4, #4]
 8001488:	4368      	muls	r0, r5
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	fbb0 f9f2 	udiv	r9, r0, r2
 8001490:	f7ff fd24 	bl	8000edc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001494:	6863      	ldr	r3, [r4, #4]
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	4368      	muls	r0, r5
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a0:	fbb3 f3f8 	udiv	r3, r3, r8
 80014a4:	fb08 9313 	mls	r3, r8, r3, r9
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	3332      	adds	r3, #50	; 0x32
 80014ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	4333      	orrs	r3, r6
 80014b6:	443b      	add	r3, r7
 80014b8:	e784      	b.n	80013c4 <UART_SetConfig+0xd4>
 80014ba:	f7ff fcf7 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 80014be:	6867      	ldr	r7, [r4, #4]
 80014c0:	2519      	movs	r5, #25
 80014c2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80014c6:	fb05 f300 	mul.w	r3, r5, r0
 80014ca:	00bf      	lsls	r7, r7, #2
 80014cc:	fbb3 f3f7 	udiv	r3, r3, r7
 80014d0:	fbb3 f3f8 	udiv	r3, r3, r8
 80014d4:	011f      	lsls	r7, r3, #4
 80014d6:	f7ff fce9 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	4368      	muls	r0, r5
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fbb0 f6f3 	udiv	r6, r0, r3
 80014e4:	f7ff fce2 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 80014e8:	6863      	ldr	r3, [r4, #4]
 80014ea:	4368      	muls	r0, r5
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80014f6:	fb08 6313 	mls	r3, r8, r3, r6
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	3332      	adds	r3, #50	; 0x32
 80014fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001502:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001506:	f7ff fcd1 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 800150a:	6862      	ldr	r2, [r4, #4]
 800150c:	4368      	muls	r0, r5
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	fbb0 f9f2 	udiv	r9, r0, r2
 8001514:	f7ff fcca 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 8001518:	e7bc      	b.n	8001494 <UART_SetConfig+0x1a4>
 800151a:	bf00      	nop
 800151c:	40011000 	.word	0x40011000
 8001520:	40011400 	.word	0x40011400

08001524 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	4604      	mov	r4, r0
 8001528:	460e      	mov	r6, r1
 800152a:	4617      	mov	r7, r2
 800152c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800152e:	6821      	ldr	r1, [r4, #0]
 8001530:	680b      	ldr	r3, [r1, #0]
 8001532:	ea36 0303 	bics.w	r3, r6, r3
 8001536:	d101      	bne.n	800153c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001538:	2000      	movs	r0, #0
 800153a:	e014      	b.n	8001566 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 800153c:	1c6b      	adds	r3, r5, #1
 800153e:	d0f7      	beq.n	8001530 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001540:	b995      	cbnz	r5, 8001568 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800154a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001554:	2320      	movs	r3, #32
 8001556:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800155a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800155e:	2300      	movs	r3, #0
 8001560:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001564:	2003      	movs	r0, #3
}
 8001566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001568:	f7fe fec8 	bl	80002fc <HAL_GetTick>
 800156c:	1bc0      	subs	r0, r0, r7
 800156e:	4285      	cmp	r5, r0
 8001570:	d2dd      	bcs.n	800152e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001572:	e7e6      	b.n	8001542 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001574 <HAL_UART_Init>:
{
 8001574:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001576:	4604      	mov	r4, r0
 8001578:	b340      	cbz	r0, 80015cc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800157a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800157e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001582:	b91b      	cbnz	r3, 800158c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001584:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001588:	f000 fa44 	bl	8001a14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800158c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800158e:	2324      	movs	r3, #36	; 0x24
 8001590:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001594:	68d3      	ldr	r3, [r2, #12]
 8001596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800159a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800159c:	4620      	mov	r0, r4
 800159e:	f7ff fea7 	bl	80012f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015b2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015ba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015bc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80015be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80015c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80015c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80015ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015cc:	2001      	movs	r0, #1
 80015ce:	e7fc      	b.n	80015ca <HAL_UART_Init+0x56>

080015d0 <HAL_UART_Transmit>:
{
 80015d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80015d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015da:	2b20      	cmp	r3, #32
{
 80015dc:	4604      	mov	r4, r0
 80015de:	460d      	mov	r5, r1
 80015e0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80015e2:	d14d      	bne.n	8001680 <HAL_UART_Transmit+0xb0>
    if((pData == NULL ) || (Size == 0U)) 
 80015e4:	2900      	cmp	r1, #0
 80015e6:	d049      	beq.n	800167c <HAL_UART_Transmit+0xac>
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d047      	beq.n	800167c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80015ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d045      	beq.n	8001680 <HAL_UART_Transmit+0xb0>
 80015f4:	2301      	movs	r3, #1
 80015f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015fe:	2321      	movs	r3, #33	; 0x21
 8001600:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001604:	f7fe fe7a 	bl	80002fc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001608:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800160c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800160e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001612:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001614:	b29b      	uxth	r3, r3
 8001616:	b963      	cbnz	r3, 8001632 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001618:	463b      	mov	r3, r7
 800161a:	4632      	mov	r2, r6
 800161c:	2140      	movs	r1, #64	; 0x40
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff ff80 	bl	8001524 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001624:	b9a8      	cbnz	r0, 8001652 <HAL_UART_Transmit+0x82>
      huart->gState = HAL_UART_STATE_READY;
 8001626:	2320      	movs	r3, #32
 8001628:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800162c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001630:	e010      	b.n	8001654 <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 8001632:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001634:	3b01      	subs	r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800163a:	68a3      	ldr	r3, [r4, #8]
 800163c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001640:	4632      	mov	r2, r6
 8001642:	463b      	mov	r3, r7
 8001644:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001648:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800164a:	d10e      	bne.n	800166a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800164c:	f7ff ff6a 	bl	8001524 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001650:	b110      	cbz	r0, 8001658 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001652:	2003      	movs	r0, #3
}
 8001654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 8001658:	882b      	ldrh	r3, [r5, #0]
 800165a:	6822      	ldr	r2, [r4, #0]
 800165c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001660:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001662:	6923      	ldr	r3, [r4, #16]
 8001664:	b943      	cbnz	r3, 8001678 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001666:	3502      	adds	r5, #2
 8001668:	e7d3      	b.n	8001612 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800166a:	f7ff ff5b 	bl	8001524 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800166e:	2800      	cmp	r0, #0
 8001670:	d1ef      	bne.n	8001652 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	782a      	ldrb	r2, [r5, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	3501      	adds	r5, #1
 800167a:	e7ca      	b.n	8001612 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800167c:	2001      	movs	r0, #1
 800167e:	e7e9      	b.n	8001654 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8001680:	2002      	movs	r0, #2
 8001682:	e7e7      	b.n	8001654 <HAL_UART_Transmit+0x84>

08001684 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001684:	b530      	push	{r4, r5, lr}
 8001686:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	4a26      	ldr	r2, [pc, #152]	; (8001724 <SystemClock_Config+0xa0>)
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001690:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001694:	6411      	str	r1, [r2, #64]	; 0x40
 8001696:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001698:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800169c:	9201      	str	r2, [sp, #4]
 800169e:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <SystemClock_Config+0xa4>)
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	6811      	ldr	r1, [r2, #0]
 80016a6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80016aa:	6011      	str	r1, [r2, #0]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f402 4240 	and.w	r2, r2, #49152	; 0xc000

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b2:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016b6:	2504      	movs	r5, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ba:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80016bc:	2210      	movs	r2, #16
 80016be:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c0:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016c6:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80016ca:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016ce:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016d0:	e9cd 3511 	strd	r3, r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d4:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d6:	f7ff f963 	bl	80009a0 <HAL_RCC_OscConfig>
 80016da:	b100      	cbz	r0, 80016de <SystemClock_Config+0x5a>
 80016dc:	e7fe      	b.n	80016dc <SystemClock_Config+0x58>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ea:	e9cd 3006 	strd	r3, r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ee:	4621      	mov	r1, r4
 80016f0:	a803      	add	r0, sp, #12
 80016f2:	f7ff fb21 	bl	8000d38 <HAL_RCC_ClockConfig>
 80016f6:	4604      	mov	r4, r0
 80016f8:	b100      	cbz	r0, 80016fc <SystemClock_Config+0x78>
 80016fa:	e7fe      	b.n	80016fa <SystemClock_Config+0x76>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80016fc:	f7ff fbd0 	bl	8000ea0 <HAL_RCC_GetHCLKFreq>
 8001700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001704:	fbb0 f0f3 	udiv	r0, r0, r3
 8001708:	f7ff f842 	bl	8000790 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800170c:	4628      	mov	r0, r5
 800170e:	f7ff f855 	bl	80007bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001712:	4622      	mov	r2, r4
 8001714:	4621      	mov	r1, r4
 8001716:	f04f 30ff 	mov.w	r0, #4294967295
 800171a:	f7fe fff9 	bl	8000710 <HAL_NVIC_SetPriority>
}
 800171e:	b015      	add	sp, #84	; 0x54
 8001720:	bd30      	pop	{r4, r5, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000

0800172c <main>:
{
 800172c:	b500      	push	{lr}
 800172e:	b08d      	sub	sp, #52	; 0x34
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	2500      	movs	r5, #0
  HAL_Init();
 8001732:	f7fe fdc1 	bl	80002b8 <HAL_Init>
  SystemClock_Config();
 8001736:	f7ff ffa5 	bl	8001684 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <main+0x194>)
 800173c:	9501      	str	r5, [sp, #4]
 800173e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001740:	4860      	ldr	r0, [pc, #384]	; (80018c4 <main+0x198>)
  hadc1.Instance = ADC1;
 8001742:	4c61      	ldr	r4, [pc, #388]	; (80018c8 <main+0x19c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	f042 0204 	orr.w	r2, r2, #4
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
 800174a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174c:	f002 0204 	and.w	r2, r2, #4
 8001750:	9201      	str	r2, [sp, #4]
 8001752:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001754:	9502      	str	r5, [sp, #8]
 8001756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001758:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001764:	9202      	str	r2, [sp, #8]
 8001766:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	9503      	str	r5, [sp, #12]
 800176a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001774:	f002 0201 	and.w	r2, r2, #1
 8001778:	9203      	str	r2, [sp, #12]
 800177a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	9504      	str	r5, [sp, #16]
 800177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001780:	f042 0202 	orr.w	r2, r2, #2
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800178c:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001790:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001794:	f7ff f8fa 	bl	800098c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <main+0x1a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a0:	e9cd 0307 	strd	r0, r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a4:	a907      	add	r1, sp, #28
 80017a6:	484a      	ldr	r0, [pc, #296]	; (80018d0 <main+0x1a4>)
 80017a8:	f7ff f81a 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2601      	movs	r6, #1
 80017ae:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017b0:	4844      	ldr	r0, [pc, #272]	; (80018c4 <main+0x198>)
 80017b2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f7ff f810 	bl	80007e0 <HAL_GPIO_Init>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017c0:	f8df c138 	ldr.w	ip, [pc, #312]	; 80018fc <main+0x1d0>
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017c4:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ca:	e9c4 c300 	strd	ip, r3, [r4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ce:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <main+0x1a8>)
  hadc1.Init.ScanConvMode = DISABLE;
 80017d2:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017d4:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d6:	6225      	str	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d8:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017da:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017dc:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017de:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e0:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e2:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e4:	f7fe fd90 	bl	8000308 <HAL_ADC_Init>
 80017e8:	b100      	cbz	r0, 80017ec <main+0xc0>
 80017ea:	e7fe      	b.n	80017ea <main+0xbe>
  sConfig.Rank = 1;
 80017ec:	e9cd 0607 	strd	r0, r6, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017f0:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f2:	a907      	add	r1, sp, #28
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7fe fee5 	bl	80005c4 <HAL_ADC_ConfigChannel>
 80017fa:	b100      	cbz	r0, 80017fe <main+0xd2>
 80017fc:	e7fe      	b.n	80017fc <main+0xd0>
  htim3.Instance = TIM3;
 80017fe:	4e36      	ldr	r6, [pc, #216]	; (80018d8 <main+0x1ac>)
  htim3.Init.Prescaler = 8399;
 8001800:	4936      	ldr	r1, [pc, #216]	; (80018dc <main+0x1b0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	60b0      	str	r0, [r6, #8]
  htim3.Init.Prescaler = 8399;
 8001804:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8001808:	e9c6 1300 	strd	r1, r3, [r6]
  htim3.Init.Period = 3999;
 800180c:	f640 739f 	movw	r3, #3999	; 0xf9f
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001810:	e9c6 3003 	strd	r3, r0, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001814:	4630      	mov	r0, r6
 8001816:	f7ff fd2d 	bl	8001274 <HAL_TIM_Base_Init>
 800181a:	b100      	cbz	r0, 800181e <main+0xf2>
 800181c:	e7fe      	b.n	800181c <main+0xf0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001822:	a907      	add	r1, sp, #28
 8001824:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001826:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001828:	f7ff fb7b 	bl	8000f22 <HAL_TIM_ConfigClockSource>
 800182c:	b100      	cbz	r0, 8001830 <main+0x104>
 800182e:	e7fe      	b.n	800182e <main+0x102>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001830:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001834:	a905      	add	r1, sp, #20
 8001836:	4630      	mov	r0, r6
 8001838:	f7ff fd36 	bl	80012a8 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	b100      	cbz	r0, 8001840 <main+0x114>
 800183e:	e7fe      	b.n	800183e <main+0x112>
  huart2.Instance = USART2;
 8001840:	4d27      	ldr	r5, [pc, #156]	; (80018e0 <main+0x1b4>)
  huart2.Init.BaudRate = 115200;
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <main+0x1b8>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8001844:	6128      	str	r0, [r5, #16]
  huart2.Init.BaudRate = 115200;
 8001846:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800184a:	e9c5 2300 	strd	r2, r3, [r5]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184e:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001850:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001854:	e9c5 3005 	strd	r3, r0, [r5, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185a:	4628      	mov	r0, r5
 800185c:	f7ff fe8a 	bl	8001574 <HAL_UART_Init>
 8001860:	b100      	cbz	r0, 8001864 <main+0x138>
 8001862:	e7fe      	b.n	8001862 <main+0x136>
  HAL_TIM_Base_Start_IT(&htim3);
 8001864:	4630      	mov	r0, r6
 8001866:	f7ff fb51 	bl	8000f0c <HAL_TIM_Base_Start_IT>
  sprintf(msg,"Exemplo uso ADC com disparo por software \n\r");
 800186a:	491f      	ldr	r1, [pc, #124]	; (80018e8 <main+0x1bc>)
 800186c:	481f      	ldr	r0, [pc, #124]	; (80018ec <main+0x1c0>)
 800186e:	f000 f99b 	bl	8001ba8 <strcpy>
  HAL_UART_Transmit(&huart2, msg, strlen(msg),SERIAL_TIMEOUT);
 8001872:	481e      	ldr	r0, [pc, #120]	; (80018ec <main+0x1c0>)
 8001874:	f7fe fcb4 	bl	80001e0 <strlen>
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	b282      	uxth	r2, r0
 800187c:	491b      	ldr	r1, [pc, #108]	; (80018ec <main+0x1c0>)
 800187e:	4628      	mov	r0, r5
 8001880:	f7ff fea6 	bl	80015d0 <HAL_UART_Transmit>
		  sprintf(msg,"%d",adcvalue);
 8001884:	4d19      	ldr	r5, [pc, #100]	; (80018ec <main+0x1c0>)
	  adstatus = HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT);
 8001886:	4e1a      	ldr	r6, [pc, #104]	; (80018f0 <main+0x1c4>)
 8001888:	2164      	movs	r1, #100	; 0x64
 800188a:	4620      	mov	r0, r4
 800188c:	f7fe fe46 	bl	800051c <HAL_ADC_PollForConversion>
 8001890:	7030      	strb	r0, [r6, #0]
	  if (adstatus==HAL_OK)
 8001892:	2800      	cmp	r0, #0
 8001894:	d1f8      	bne.n	8001888 <main+0x15c>
		  adcvalue= HAL_ADC_GetValue(&hadc1);
 8001896:	4620      	mov	r0, r4
 8001898:	f7fe fe90 	bl	80005bc <HAL_ADC_GetValue>
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <main+0x1c8>)
		  sprintf(msg,"%d",adcvalue);
 800189e:	4916      	ldr	r1, [pc, #88]	; (80018f8 <main+0x1cc>)
		  adcvalue= HAL_ADC_GetValue(&hadc1);
 80018a0:	6018      	str	r0, [r3, #0]
 80018a2:	4602      	mov	r2, r0
		  sprintf(msg,"%d",adcvalue);
 80018a4:	4628      	mov	r0, r5
 80018a6:	f000 f95f 	bl	8001b68 <siprintf>
		   HAL_UART_Transmit(&huart2, msg, strlen(msg),SERIAL_TIMEOUT);
 80018aa:	4628      	mov	r0, r5
 80018ac:	f7fe fc98 	bl	80001e0 <strlen>
 80018b0:	2364      	movs	r3, #100	; 0x64
 80018b2:	b282      	uxth	r2, r0
 80018b4:	4629      	mov	r1, r5
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <main+0x1b4>)
 80018b8:	f7ff fe8a 	bl	80015d0 <HAL_UART_Transmit>
 80018bc:	e7e3      	b.n	8001886 <main+0x15a>
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	20000104 	.word	0x20000104
 80018cc:	10210000 	.word	0x10210000
 80018d0:	40020800 	.word	0x40020800
 80018d4:	0f000001 	.word	0x0f000001
 80018d8:	200000c8 	.word	0x200000c8
 80018dc:	40000400 	.word	0x40000400
 80018e0:	20000154 	.word	0x20000154
 80018e4:	40004400 	.word	0x40004400
 80018e8:	080023c8 	.word	0x080023c8
 80018ec:	20000094 	.word	0x20000094
 80018f0:	20000150 	.word	0x20000150
 80018f4:	2000014c 	.word	0x2000014c
 80018f8:	080023f4 	.word	0x080023f4
 80018fc:	40012000 	.word	0x40012000

08001900 <HAL_TIM_PeriodElapsedCallback>:
 *
 *
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b508      	push	{r3, lr}
	if( htim->Instance==TIM3 ) // testa se a interrupcao foi gerada pelo timer 3
 8001902:	6802      	ldr	r2, [r0, #0]
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001906:	429a      	cmp	r2, r3
 8001908:	d108      	bne.n	800191c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800190c:	2120      	movs	r1, #32
 800190e:	f7ff f842 	bl	8000996 <HAL_GPIO_TogglePin>
		HAL_ADC_Start(&hadc1);
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x28>)
	}

}
 8001914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_ADC_Start(&hadc1);
 8001918:	f7fe bda0 	b.w	800045c <HAL_ADC_Start>
}
 800191c:	bd08      	pop	{r3, pc}
 800191e:	bf00      	nop
 8001920:	40000400 	.word	0x40000400
 8001924:	40020000 	.word	0x40020000
 8001928:	20000104 	.word	0x20000104

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800192e:	2007      	movs	r0, #7
 8001930:	f7fe fedc 	bl	80006ec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	4611      	mov	r1, r2
 8001938:	f06f 000b 	mvn.w	r0, #11
 800193c:	f7fe fee8 	bl	8000710 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	4611      	mov	r1, r2
 8001944:	f06f 000a 	mvn.w	r0, #10
 8001948:	f7fe fee2 	bl	8000710 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	4611      	mov	r1, r2
 8001950:	f06f 0009 	mvn.w	r0, #9
 8001954:	f7fe fedc 	bl	8000710 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	4611      	mov	r1, r2
 800195c:	f06f 0004 	mvn.w	r0, #4
 8001960:	f7fe fed6 	bl	8000710 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	4611      	mov	r1, r2
 8001968:	f06f 0003 	mvn.w	r0, #3
 800196c:	f7fe fed0 	bl	8000710 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	4611      	mov	r1, r2
 8001974:	f06f 0001 	mvn.w	r0, #1
 8001978:	f7fe feca 	bl	8000710 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	4611      	mov	r1, r2
 8001980:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001988:	f7fe bec2 	b.w	8000710 <HAL_NVIC_SetPriority>

0800198c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800198c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800198e:	6802      	ldr	r2, [r0, #0]
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_ADC_MspInit+0x3c>)
 8001992:	429a      	cmp	r2, r3
 8001994:	d115      	bne.n	80019c2 <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001996:	2100      	movs	r1, #0
 8001998:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800199c:	9100      	str	r1, [sp, #0]
 800199e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	480a      	ldr	r0, [pc, #40]	; (80019cc <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b4:	2201      	movs	r2, #1
 80019b6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f7fe ff0f 	bl	80007e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019c2:	b007      	add	sp, #28
 80019c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019c8:	40012000 	.word	0x40012000
 80019cc:	40020000 	.word	0x40020000

080019d0 <HAL_TIM_Base_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_TIM_Base_MspInit+0x40>)
 80019d4:	6802      	ldr	r2, [r0, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d116      	bne.n	8001a08 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019da:	2200      	movs	r2, #0
 80019dc:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019e4:	f041 0102 	orr.w	r1, r1, #2
 80019e8:	6419      	str	r1, [r3, #64]	; 0x40
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019f2:	4611      	mov	r1, r2
 80019f4:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019f8:	f7fe fe8a 	bl	8000710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019fc:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019fe:	b003      	add	sp, #12
 8001a00:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a04:	f7fe beb8 	b.w	8000778 <HAL_NVIC_EnableIRQ>
}
 8001a08:	b003      	add	sp, #12
 8001a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a0e:	bf00      	nop
 8001a10:	40000400 	.word	0x40000400

08001a14 <HAL_UART_MspInit>:
  /* USER CODE END TIM3_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_UART_MspInit+0x44>)
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d119      	bne.n	8001a52 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	480e      	ldr	r0, [pc, #56]	; (8001a60 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	220c      	movs	r2, #12
 8001a3a:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a48:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f7fe fec7 	bl	80007e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a52:	b007      	add	sp, #28
 8001a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a58:	40004400 	.word	0x40004400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000

08001a64 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f7fe fc41 	bl	80002ec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001a6e:	f7fe beb2 	b.w	80007d6 <HAL_SYSTICK_IRQHandler>
	...

08001a74 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a74:	4801      	ldr	r0, [pc, #4]	; (8001a7c <TIM3_IRQHandler+0x8>)
 8001a76:	f7ff bb11 	b.w	800109c <HAL_TIM_IRQHandler>
 8001a7a:	bf00      	nop
 8001a7c:	200000c8 	.word	0x200000c8

08001a80 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	490f      	ldr	r1, [pc, #60]	; (8001ac0 <SystemInit+0x40>)
 8001a82:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <SystemInit+0x44>)
 8001a90:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a92:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a9a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001aa2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <SystemInit+0x48>)
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ab2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ab4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001aba:	608b      	str	r3, [r1, #8]
#endif
}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	24003010 	.word	0x24003010

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ad2:	e003      	b.n	8001adc <LoopCopyDataInit>

08001ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ada:	3104      	adds	r1, #4

08001adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ae4:	d3f6      	bcc.n	8001ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ae8:	e002      	b.n	8001af0 <LoopFillZerobss>

08001aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aec:	f842 3b04 	str.w	r3, [r2], #4

08001af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001af4:	d3f9      	bcc.n	8001aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001af6:	f7ff ffc3 	bl	8001a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f000 f811 	bl	8001b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff fe15 	bl	800172c <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b08:	08002434 	.word	0x08002434
  ldr  r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b10:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001b14:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001b18:	20000198 	.word	0x20000198

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <__libc_init_array>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4e0d      	ldr	r6, [pc, #52]	; (8001b58 <__libc_init_array+0x38>)
 8001b24:	4c0d      	ldr	r4, [pc, #52]	; (8001b5c <__libc_init_array+0x3c>)
 8001b26:	1ba4      	subs	r4, r4, r6
 8001b28:	10a4      	asrs	r4, r4, #2
 8001b2a:	2500      	movs	r5, #0
 8001b2c:	42a5      	cmp	r5, r4
 8001b2e:	d109      	bne.n	8001b44 <__libc_init_array+0x24>
 8001b30:	4e0b      	ldr	r6, [pc, #44]	; (8001b60 <__libc_init_array+0x40>)
 8001b32:	4c0c      	ldr	r4, [pc, #48]	; (8001b64 <__libc_init_array+0x44>)
 8001b34:	f000 fc34 	bl	80023a0 <_init>
 8001b38:	1ba4      	subs	r4, r4, r6
 8001b3a:	10a4      	asrs	r4, r4, #2
 8001b3c:	2500      	movs	r5, #0
 8001b3e:	42a5      	cmp	r5, r4
 8001b40:	d105      	bne.n	8001b4e <__libc_init_array+0x2e>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b48:	4798      	blx	r3
 8001b4a:	3501      	adds	r5, #1
 8001b4c:	e7ee      	b.n	8001b2c <__libc_init_array+0xc>
 8001b4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b52:	4798      	blx	r3
 8001b54:	3501      	adds	r5, #1
 8001b56:	e7f2      	b.n	8001b3e <__libc_init_array+0x1e>
 8001b58:	0800242c 	.word	0x0800242c
 8001b5c:	0800242c 	.word	0x0800242c
 8001b60:	0800242c 	.word	0x0800242c
 8001b64:	08002430 	.word	0x08002430

08001b68 <siprintf>:
 8001b68:	b40e      	push	{r1, r2, r3}
 8001b6a:	b500      	push	{lr}
 8001b6c:	b09c      	sub	sp, #112	; 0x70
 8001b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8001b70:	9002      	str	r0, [sp, #8]
 8001b72:	9006      	str	r0, [sp, #24]
 8001b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <siprintf+0x38>)
 8001b7a:	9107      	str	r1, [sp, #28]
 8001b7c:	9104      	str	r1, [sp, #16]
 8001b7e:	4909      	ldr	r1, [pc, #36]	; (8001ba4 <siprintf+0x3c>)
 8001b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b84:	9105      	str	r1, [sp, #20]
 8001b86:	6800      	ldr	r0, [r0, #0]
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	a902      	add	r1, sp, #8
 8001b8c:	f000 f86e 	bl	8001c6c <_svfiprintf_r>
 8001b90:	9b02      	ldr	r3, [sp, #8]
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	b01c      	add	sp, #112	; 0x70
 8001b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b9c:	b003      	add	sp, #12
 8001b9e:	4770      	bx	lr
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	ffff0208 	.word	0xffff0208

08001ba8 <strcpy>:
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001bae:	f803 2b01 	strb.w	r2, [r3], #1
 8001bb2:	2a00      	cmp	r2, #0
 8001bb4:	d1f9      	bne.n	8001baa <strcpy+0x2>
 8001bb6:	4770      	bx	lr

08001bb8 <__ssputs_r>:
 8001bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bbc:	688e      	ldr	r6, [r1, #8]
 8001bbe:	429e      	cmp	r6, r3
 8001bc0:	4682      	mov	sl, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	4690      	mov	r8, r2
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	d837      	bhi.n	8001c3a <__ssputs_r+0x82>
 8001bca:	898a      	ldrh	r2, [r1, #12]
 8001bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001bd0:	d031      	beq.n	8001c36 <__ssputs_r+0x7e>
 8001bd2:	6825      	ldr	r5, [r4, #0]
 8001bd4:	6909      	ldr	r1, [r1, #16]
 8001bd6:	1a6f      	subs	r7, r5, r1
 8001bd8:	6965      	ldr	r5, [r4, #20]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001be0:	fb95 f5f3 	sdiv	r5, r5, r3
 8001be4:	f109 0301 	add.w	r3, r9, #1
 8001be8:	443b      	add	r3, r7
 8001bea:	429d      	cmp	r5, r3
 8001bec:	bf38      	it	cc
 8001bee:	461d      	movcc	r5, r3
 8001bf0:	0553      	lsls	r3, r2, #21
 8001bf2:	d530      	bpl.n	8001c56 <__ssputs_r+0x9e>
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f000 fb2b 	bl	8002250 <_malloc_r>
 8001bfa:	4606      	mov	r6, r0
 8001bfc:	b950      	cbnz	r0, 8001c14 <__ssputs_r+0x5c>
 8001bfe:	230c      	movs	r3, #12
 8001c00:	f8ca 3000 	str.w	r3, [sl]
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0a:	81a3      	strh	r3, [r4, #12]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c14:	463a      	mov	r2, r7
 8001c16:	6921      	ldr	r1, [r4, #16]
 8001c18:	f000 faa8 	bl	800216c <memcpy>
 8001c1c:	89a3      	ldrh	r3, [r4, #12]
 8001c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c26:	81a3      	strh	r3, [r4, #12]
 8001c28:	6126      	str	r6, [r4, #16]
 8001c2a:	6165      	str	r5, [r4, #20]
 8001c2c:	443e      	add	r6, r7
 8001c2e:	1bed      	subs	r5, r5, r7
 8001c30:	6026      	str	r6, [r4, #0]
 8001c32:	60a5      	str	r5, [r4, #8]
 8001c34:	464e      	mov	r6, r9
 8001c36:	454e      	cmp	r6, r9
 8001c38:	d900      	bls.n	8001c3c <__ssputs_r+0x84>
 8001c3a:	464e      	mov	r6, r9
 8001c3c:	4632      	mov	r2, r6
 8001c3e:	4641      	mov	r1, r8
 8001c40:	6820      	ldr	r0, [r4, #0]
 8001c42:	f000 fa9e 	bl	8002182 <memmove>
 8001c46:	68a3      	ldr	r3, [r4, #8]
 8001c48:	1b9b      	subs	r3, r3, r6
 8001c4a:	60a3      	str	r3, [r4, #8]
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	441e      	add	r6, r3
 8001c50:	6026      	str	r6, [r4, #0]
 8001c52:	2000      	movs	r0, #0
 8001c54:	e7dc      	b.n	8001c10 <__ssputs_r+0x58>
 8001c56:	462a      	mov	r2, r5
 8001c58:	f000 fb54 	bl	8002304 <_realloc_r>
 8001c5c:	4606      	mov	r6, r0
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	d1e2      	bne.n	8001c28 <__ssputs_r+0x70>
 8001c62:	6921      	ldr	r1, [r4, #16]
 8001c64:	4650      	mov	r0, sl
 8001c66:	f000 faa5 	bl	80021b4 <_free_r>
 8001c6a:	e7c8      	b.n	8001bfe <__ssputs_r+0x46>

08001c6c <_svfiprintf_r>:
 8001c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c70:	461d      	mov	r5, r3
 8001c72:	898b      	ldrh	r3, [r1, #12]
 8001c74:	061f      	lsls	r7, r3, #24
 8001c76:	b09d      	sub	sp, #116	; 0x74
 8001c78:	4680      	mov	r8, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	4616      	mov	r6, r2
 8001c7e:	d50f      	bpl.n	8001ca0 <_svfiprintf_r+0x34>
 8001c80:	690b      	ldr	r3, [r1, #16]
 8001c82:	b96b      	cbnz	r3, 8001ca0 <_svfiprintf_r+0x34>
 8001c84:	2140      	movs	r1, #64	; 0x40
 8001c86:	f000 fae3 	bl	8002250 <_malloc_r>
 8001c8a:	6020      	str	r0, [r4, #0]
 8001c8c:	6120      	str	r0, [r4, #16]
 8001c8e:	b928      	cbnz	r0, 8001c9c <_svfiprintf_r+0x30>
 8001c90:	230c      	movs	r3, #12
 8001c92:	f8c8 3000 	str.w	r3, [r8]
 8001c96:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9a:	e0c8      	b.n	8001e2e <_svfiprintf_r+0x1c2>
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	6163      	str	r3, [r4, #20]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001caa:	2330      	movs	r3, #48	; 0x30
 8001cac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cb0:	9503      	str	r5, [sp, #12]
 8001cb2:	f04f 0b01 	mov.w	fp, #1
 8001cb6:	4637      	mov	r7, r6
 8001cb8:	463d      	mov	r5, r7
 8001cba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cbe:	b10b      	cbz	r3, 8001cc4 <_svfiprintf_r+0x58>
 8001cc0:	2b25      	cmp	r3, #37	; 0x25
 8001cc2:	d13e      	bne.n	8001d42 <_svfiprintf_r+0xd6>
 8001cc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8001cc8:	d00b      	beq.n	8001ce2 <_svfiprintf_r+0x76>
 8001cca:	4653      	mov	r3, sl
 8001ccc:	4632      	mov	r2, r6
 8001cce:	4621      	mov	r1, r4
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	f7ff ff71 	bl	8001bb8 <__ssputs_r>
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	f000 80a4 	beq.w	8001e24 <_svfiprintf_r+0x1b8>
 8001cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cde:	4453      	add	r3, sl
 8001ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce2:	783b      	ldrb	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 809d 	beq.w	8001e24 <_svfiprintf_r+0x1b8>
 8001cea:	2300      	movs	r3, #0
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cf4:	9304      	str	r3, [sp, #16]
 8001cf6:	9307      	str	r3, [sp, #28]
 8001cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8001cfe:	462f      	mov	r7, r5
 8001d00:	2205      	movs	r2, #5
 8001d02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001d06:	4850      	ldr	r0, [pc, #320]	; (8001e48 <_svfiprintf_r+0x1dc>)
 8001d08:	f7fe fa72 	bl	80001f0 <memchr>
 8001d0c:	9b04      	ldr	r3, [sp, #16]
 8001d0e:	b9d0      	cbnz	r0, 8001d46 <_svfiprintf_r+0xda>
 8001d10:	06d9      	lsls	r1, r3, #27
 8001d12:	bf44      	itt	mi
 8001d14:	2220      	movmi	r2, #32
 8001d16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d1a:	071a      	lsls	r2, r3, #28
 8001d1c:	bf44      	itt	mi
 8001d1e:	222b      	movmi	r2, #43	; 0x2b
 8001d20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d24:	782a      	ldrb	r2, [r5, #0]
 8001d26:	2a2a      	cmp	r2, #42	; 0x2a
 8001d28:	d015      	beq.n	8001d56 <_svfiprintf_r+0xea>
 8001d2a:	9a07      	ldr	r2, [sp, #28]
 8001d2c:	462f      	mov	r7, r5
 8001d2e:	2000      	movs	r0, #0
 8001d30:	250a      	movs	r5, #10
 8001d32:	4639      	mov	r1, r7
 8001d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d38:	3b30      	subs	r3, #48	; 0x30
 8001d3a:	2b09      	cmp	r3, #9
 8001d3c:	d94d      	bls.n	8001dda <_svfiprintf_r+0x16e>
 8001d3e:	b1b8      	cbz	r0, 8001d70 <_svfiprintf_r+0x104>
 8001d40:	e00f      	b.n	8001d62 <_svfiprintf_r+0xf6>
 8001d42:	462f      	mov	r7, r5
 8001d44:	e7b8      	b.n	8001cb8 <_svfiprintf_r+0x4c>
 8001d46:	4a40      	ldr	r2, [pc, #256]	; (8001e48 <_svfiprintf_r+0x1dc>)
 8001d48:	1a80      	subs	r0, r0, r2
 8001d4a:	fa0b f000 	lsl.w	r0, fp, r0
 8001d4e:	4318      	orrs	r0, r3
 8001d50:	9004      	str	r0, [sp, #16]
 8001d52:	463d      	mov	r5, r7
 8001d54:	e7d3      	b.n	8001cfe <_svfiprintf_r+0x92>
 8001d56:	9a03      	ldr	r2, [sp, #12]
 8001d58:	1d11      	adds	r1, r2, #4
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	9103      	str	r1, [sp, #12]
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	db01      	blt.n	8001d66 <_svfiprintf_r+0xfa>
 8001d62:	9207      	str	r2, [sp, #28]
 8001d64:	e004      	b.n	8001d70 <_svfiprintf_r+0x104>
 8001d66:	4252      	negs	r2, r2
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	9207      	str	r2, [sp, #28]
 8001d6e:	9304      	str	r3, [sp, #16]
 8001d70:	783b      	ldrb	r3, [r7, #0]
 8001d72:	2b2e      	cmp	r3, #46	; 0x2e
 8001d74:	d10c      	bne.n	8001d90 <_svfiprintf_r+0x124>
 8001d76:	787b      	ldrb	r3, [r7, #1]
 8001d78:	2b2a      	cmp	r3, #42	; 0x2a
 8001d7a:	d133      	bne.n	8001de4 <_svfiprintf_r+0x178>
 8001d7c:	9b03      	ldr	r3, [sp, #12]
 8001d7e:	1d1a      	adds	r2, r3, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	9203      	str	r2, [sp, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bfb8      	it	lt
 8001d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d8c:	3702      	adds	r7, #2
 8001d8e:	9305      	str	r3, [sp, #20]
 8001d90:	4d2e      	ldr	r5, [pc, #184]	; (8001e4c <_svfiprintf_r+0x1e0>)
 8001d92:	7839      	ldrb	r1, [r7, #0]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4628      	mov	r0, r5
 8001d98:	f7fe fa2a 	bl	80001f0 <memchr>
 8001d9c:	b138      	cbz	r0, 8001dae <_svfiprintf_r+0x142>
 8001d9e:	2340      	movs	r3, #64	; 0x40
 8001da0:	1b40      	subs	r0, r0, r5
 8001da2:	fa03 f000 	lsl.w	r0, r3, r0
 8001da6:	9b04      	ldr	r3, [sp, #16]
 8001da8:	4303      	orrs	r3, r0
 8001daa:	3701      	adds	r7, #1
 8001dac:	9304      	str	r3, [sp, #16]
 8001dae:	7839      	ldrb	r1, [r7, #0]
 8001db0:	4827      	ldr	r0, [pc, #156]	; (8001e50 <_svfiprintf_r+0x1e4>)
 8001db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001db6:	2206      	movs	r2, #6
 8001db8:	1c7e      	adds	r6, r7, #1
 8001dba:	f7fe fa19 	bl	80001f0 <memchr>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d038      	beq.n	8001e34 <_svfiprintf_r+0x1c8>
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <_svfiprintf_r+0x1e8>)
 8001dc4:	bb13      	cbnz	r3, 8001e0c <_svfiprintf_r+0x1a0>
 8001dc6:	9b03      	ldr	r3, [sp, #12]
 8001dc8:	3307      	adds	r3, #7
 8001dca:	f023 0307 	bic.w	r3, r3, #7
 8001dce:	3308      	adds	r3, #8
 8001dd0:	9303      	str	r3, [sp, #12]
 8001dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001dd4:	444b      	add	r3, r9
 8001dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8001dd8:	e76d      	b.n	8001cb6 <_svfiprintf_r+0x4a>
 8001dda:	fb05 3202 	mla	r2, r5, r2, r3
 8001dde:	2001      	movs	r0, #1
 8001de0:	460f      	mov	r7, r1
 8001de2:	e7a6      	b.n	8001d32 <_svfiprintf_r+0xc6>
 8001de4:	2300      	movs	r3, #0
 8001de6:	3701      	adds	r7, #1
 8001de8:	9305      	str	r3, [sp, #20]
 8001dea:	4619      	mov	r1, r3
 8001dec:	250a      	movs	r5, #10
 8001dee:	4638      	mov	r0, r7
 8001df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001df4:	3a30      	subs	r2, #48	; 0x30
 8001df6:	2a09      	cmp	r2, #9
 8001df8:	d903      	bls.n	8001e02 <_svfiprintf_r+0x196>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0c8      	beq.n	8001d90 <_svfiprintf_r+0x124>
 8001dfe:	9105      	str	r1, [sp, #20]
 8001e00:	e7c6      	b.n	8001d90 <_svfiprintf_r+0x124>
 8001e02:	fb05 2101 	mla	r1, r5, r1, r2
 8001e06:	2301      	movs	r3, #1
 8001e08:	4607      	mov	r7, r0
 8001e0a:	e7f0      	b.n	8001dee <_svfiprintf_r+0x182>
 8001e0c:	ab03      	add	r3, sp, #12
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4622      	mov	r2, r4
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <_svfiprintf_r+0x1ec>)
 8001e14:	a904      	add	r1, sp, #16
 8001e16:	4640      	mov	r0, r8
 8001e18:	f3af 8000 	nop.w
 8001e1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e20:	4681      	mov	r9, r0
 8001e22:	d1d6      	bne.n	8001dd2 <_svfiprintf_r+0x166>
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	065b      	lsls	r3, r3, #25
 8001e28:	f53f af35 	bmi.w	8001c96 <_svfiprintf_r+0x2a>
 8001e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e2e:	b01d      	add	sp, #116	; 0x74
 8001e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e34:	ab03      	add	r3, sp, #12
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4622      	mov	r2, r4
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <_svfiprintf_r+0x1ec>)
 8001e3c:	a904      	add	r1, sp, #16
 8001e3e:	4640      	mov	r0, r8
 8001e40:	f000 f882 	bl	8001f48 <_printf_i>
 8001e44:	e7ea      	b.n	8001e1c <_svfiprintf_r+0x1b0>
 8001e46:	bf00      	nop
 8001e48:	080023f7 	.word	0x080023f7
 8001e4c:	080023fd 	.word	0x080023fd
 8001e50:	08002401 	.word	0x08002401
 8001e54:	00000000 	.word	0x00000000
 8001e58:	08001bb9 	.word	0x08001bb9

08001e5c <_printf_common>:
 8001e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e60:	4691      	mov	r9, r2
 8001e62:	461f      	mov	r7, r3
 8001e64:	688a      	ldr	r2, [r1, #8]
 8001e66:	690b      	ldr	r3, [r1, #16]
 8001e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	bfb8      	it	lt
 8001e70:	4613      	movlt	r3, r2
 8001e72:	f8c9 3000 	str.w	r3, [r9]
 8001e76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	460c      	mov	r4, r1
 8001e7e:	b112      	cbz	r2, 8001e86 <_printf_common+0x2a>
 8001e80:	3301      	adds	r3, #1
 8001e82:	f8c9 3000 	str.w	r3, [r9]
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	0699      	lsls	r1, r3, #26
 8001e8a:	bf42      	ittt	mi
 8001e8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e90:	3302      	addmi	r3, #2
 8001e92:	f8c9 3000 	strmi.w	r3, [r9]
 8001e96:	6825      	ldr	r5, [r4, #0]
 8001e98:	f015 0506 	ands.w	r5, r5, #6
 8001e9c:	d107      	bne.n	8001eae <_printf_common+0x52>
 8001e9e:	f104 0a19 	add.w	sl, r4, #25
 8001ea2:	68e3      	ldr	r3, [r4, #12]
 8001ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	42ab      	cmp	r3, r5
 8001eac:	dc28      	bgt.n	8001f00 <_printf_common+0xa4>
 8001eae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001eb2:	6822      	ldr	r2, [r4, #0]
 8001eb4:	3300      	adds	r3, #0
 8001eb6:	bf18      	it	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	0692      	lsls	r2, r2, #26
 8001ebc:	d42d      	bmi.n	8001f1a <_printf_common+0xbe>
 8001ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ec2:	4639      	mov	r1, r7
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	47c0      	blx	r8
 8001ec8:	3001      	adds	r0, #1
 8001eca:	d020      	beq.n	8001f0e <_printf_common+0xb2>
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	68e5      	ldr	r5, [r4, #12]
 8001ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8001ed4:	f003 0306 	and.w	r3, r3, #6
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	bf08      	it	eq
 8001edc:	1aad      	subeq	r5, r5, r2
 8001ede:	68a3      	ldr	r3, [r4, #8]
 8001ee0:	6922      	ldr	r2, [r4, #16]
 8001ee2:	bf0c      	ite	eq
 8001ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ee8:	2500      	movne	r5, #0
 8001eea:	4293      	cmp	r3, r2
 8001eec:	bfc4      	itt	gt
 8001eee:	1a9b      	subgt	r3, r3, r2
 8001ef0:	18ed      	addgt	r5, r5, r3
 8001ef2:	f04f 0900 	mov.w	r9, #0
 8001ef6:	341a      	adds	r4, #26
 8001ef8:	454d      	cmp	r5, r9
 8001efa:	d11a      	bne.n	8001f32 <_printf_common+0xd6>
 8001efc:	2000      	movs	r0, #0
 8001efe:	e008      	b.n	8001f12 <_printf_common+0xb6>
 8001f00:	2301      	movs	r3, #1
 8001f02:	4652      	mov	r2, sl
 8001f04:	4639      	mov	r1, r7
 8001f06:	4630      	mov	r0, r6
 8001f08:	47c0      	blx	r8
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	d103      	bne.n	8001f16 <_printf_common+0xba>
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f16:	3501      	adds	r5, #1
 8001f18:	e7c3      	b.n	8001ea2 <_printf_common+0x46>
 8001f1a:	18e1      	adds	r1, r4, r3
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	2030      	movs	r0, #48	; 0x30
 8001f20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f24:	4422      	add	r2, r4
 8001f26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f2e:	3302      	adds	r3, #2
 8001f30:	e7c5      	b.n	8001ebe <_printf_common+0x62>
 8001f32:	2301      	movs	r3, #1
 8001f34:	4622      	mov	r2, r4
 8001f36:	4639      	mov	r1, r7
 8001f38:	4630      	mov	r0, r6
 8001f3a:	47c0      	blx	r8
 8001f3c:	3001      	adds	r0, #1
 8001f3e:	d0e6      	beq.n	8001f0e <_printf_common+0xb2>
 8001f40:	f109 0901 	add.w	r9, r9, #1
 8001f44:	e7d8      	b.n	8001ef8 <_printf_common+0x9c>
	...

08001f48 <_printf_i>:
 8001f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f50:	460c      	mov	r4, r1
 8001f52:	7e09      	ldrb	r1, [r1, #24]
 8001f54:	b085      	sub	sp, #20
 8001f56:	296e      	cmp	r1, #110	; 0x6e
 8001f58:	4617      	mov	r7, r2
 8001f5a:	4606      	mov	r6, r0
 8001f5c:	4698      	mov	r8, r3
 8001f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001f60:	f000 80b3 	beq.w	80020ca <_printf_i+0x182>
 8001f64:	d822      	bhi.n	8001fac <_printf_i+0x64>
 8001f66:	2963      	cmp	r1, #99	; 0x63
 8001f68:	d036      	beq.n	8001fd8 <_printf_i+0x90>
 8001f6a:	d80a      	bhi.n	8001f82 <_printf_i+0x3a>
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	f000 80b9 	beq.w	80020e4 <_printf_i+0x19c>
 8001f72:	2958      	cmp	r1, #88	; 0x58
 8001f74:	f000 8083 	beq.w	800207e <_printf_i+0x136>
 8001f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001f80:	e032      	b.n	8001fe8 <_printf_i+0xa0>
 8001f82:	2964      	cmp	r1, #100	; 0x64
 8001f84:	d001      	beq.n	8001f8a <_printf_i+0x42>
 8001f86:	2969      	cmp	r1, #105	; 0x69
 8001f88:	d1f6      	bne.n	8001f78 <_printf_i+0x30>
 8001f8a:	6820      	ldr	r0, [r4, #0]
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	0605      	lsls	r5, r0, #24
 8001f90:	f103 0104 	add.w	r1, r3, #4
 8001f94:	d52a      	bpl.n	8001fec <_printf_i+0xa4>
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6011      	str	r1, [r2, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da03      	bge.n	8001fa6 <_printf_i+0x5e>
 8001f9e:	222d      	movs	r2, #45	; 0x2d
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fa6:	486f      	ldr	r0, [pc, #444]	; (8002164 <_printf_i+0x21c>)
 8001fa8:	220a      	movs	r2, #10
 8001faa:	e039      	b.n	8002020 <_printf_i+0xd8>
 8001fac:	2973      	cmp	r1, #115	; 0x73
 8001fae:	f000 809d 	beq.w	80020ec <_printf_i+0x1a4>
 8001fb2:	d808      	bhi.n	8001fc6 <_printf_i+0x7e>
 8001fb4:	296f      	cmp	r1, #111	; 0x6f
 8001fb6:	d020      	beq.n	8001ffa <_printf_i+0xb2>
 8001fb8:	2970      	cmp	r1, #112	; 0x70
 8001fba:	d1dd      	bne.n	8001f78 <_printf_i+0x30>
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	f043 0320 	orr.w	r3, r3, #32
 8001fc2:	6023      	str	r3, [r4, #0]
 8001fc4:	e003      	b.n	8001fce <_printf_i+0x86>
 8001fc6:	2975      	cmp	r1, #117	; 0x75
 8001fc8:	d017      	beq.n	8001ffa <_printf_i+0xb2>
 8001fca:	2978      	cmp	r1, #120	; 0x78
 8001fcc:	d1d4      	bne.n	8001f78 <_printf_i+0x30>
 8001fce:	2378      	movs	r3, #120	; 0x78
 8001fd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fd4:	4864      	ldr	r0, [pc, #400]	; (8002168 <_printf_i+0x220>)
 8001fd6:	e055      	b.n	8002084 <_printf_i+0x13c>
 8001fd8:	6813      	ldr	r3, [r2, #0]
 8001fda:	1d19      	adds	r1, r3, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6011      	str	r1, [r2, #0]
 8001fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e08c      	b.n	8002106 <_printf_i+0x1be>
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6011      	str	r1, [r2, #0]
 8001ff0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ff4:	bf18      	it	ne
 8001ff6:	b21b      	sxthne	r3, r3
 8001ff8:	e7cf      	b.n	8001f9a <_printf_i+0x52>
 8001ffa:	6813      	ldr	r3, [r2, #0]
 8001ffc:	6825      	ldr	r5, [r4, #0]
 8001ffe:	1d18      	adds	r0, r3, #4
 8002000:	6010      	str	r0, [r2, #0]
 8002002:	0628      	lsls	r0, r5, #24
 8002004:	d501      	bpl.n	800200a <_printf_i+0xc2>
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e002      	b.n	8002010 <_printf_i+0xc8>
 800200a:	0668      	lsls	r0, r5, #25
 800200c:	d5fb      	bpl.n	8002006 <_printf_i+0xbe>
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	4854      	ldr	r0, [pc, #336]	; (8002164 <_printf_i+0x21c>)
 8002012:	296f      	cmp	r1, #111	; 0x6f
 8002014:	bf14      	ite	ne
 8002016:	220a      	movne	r2, #10
 8002018:	2208      	moveq	r2, #8
 800201a:	2100      	movs	r1, #0
 800201c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002020:	6865      	ldr	r5, [r4, #4]
 8002022:	60a5      	str	r5, [r4, #8]
 8002024:	2d00      	cmp	r5, #0
 8002026:	f2c0 8095 	blt.w	8002154 <_printf_i+0x20c>
 800202a:	6821      	ldr	r1, [r4, #0]
 800202c:	f021 0104 	bic.w	r1, r1, #4
 8002030:	6021      	str	r1, [r4, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d13d      	bne.n	80020b2 <_printf_i+0x16a>
 8002036:	2d00      	cmp	r5, #0
 8002038:	f040 808e 	bne.w	8002158 <_printf_i+0x210>
 800203c:	4665      	mov	r5, ip
 800203e:	2a08      	cmp	r2, #8
 8002040:	d10b      	bne.n	800205a <_printf_i+0x112>
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	07db      	lsls	r3, r3, #31
 8002046:	d508      	bpl.n	800205a <_printf_i+0x112>
 8002048:	6923      	ldr	r3, [r4, #16]
 800204a:	6862      	ldr	r2, [r4, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	bfde      	ittt	le
 8002050:	2330      	movle	r3, #48	; 0x30
 8002052:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002056:	f105 35ff 	addle.w	r5, r5, #4294967295
 800205a:	ebac 0305 	sub.w	r3, ip, r5
 800205e:	6123      	str	r3, [r4, #16]
 8002060:	f8cd 8000 	str.w	r8, [sp]
 8002064:	463b      	mov	r3, r7
 8002066:	aa03      	add	r2, sp, #12
 8002068:	4621      	mov	r1, r4
 800206a:	4630      	mov	r0, r6
 800206c:	f7ff fef6 	bl	8001e5c <_printf_common>
 8002070:	3001      	adds	r0, #1
 8002072:	d14d      	bne.n	8002110 <_printf_i+0x1c8>
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	b005      	add	sp, #20
 800207a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800207e:	4839      	ldr	r0, [pc, #228]	; (8002164 <_printf_i+0x21c>)
 8002080:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	6821      	ldr	r1, [r4, #0]
 8002088:	1d1d      	adds	r5, r3, #4
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6015      	str	r5, [r2, #0]
 800208e:	060a      	lsls	r2, r1, #24
 8002090:	d50b      	bpl.n	80020aa <_printf_i+0x162>
 8002092:	07ca      	lsls	r2, r1, #31
 8002094:	bf44      	itt	mi
 8002096:	f041 0120 	orrmi.w	r1, r1, #32
 800209a:	6021      	strmi	r1, [r4, #0]
 800209c:	b91b      	cbnz	r3, 80020a6 <_printf_i+0x15e>
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	f022 0220 	bic.w	r2, r2, #32
 80020a4:	6022      	str	r2, [r4, #0]
 80020a6:	2210      	movs	r2, #16
 80020a8:	e7b7      	b.n	800201a <_printf_i+0xd2>
 80020aa:	064d      	lsls	r5, r1, #25
 80020ac:	bf48      	it	mi
 80020ae:	b29b      	uxthmi	r3, r3
 80020b0:	e7ef      	b.n	8002092 <_printf_i+0x14a>
 80020b2:	4665      	mov	r5, ip
 80020b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80020b8:	fb02 3311 	mls	r3, r2, r1, r3
 80020bc:	5cc3      	ldrb	r3, [r0, r3]
 80020be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020c2:	460b      	mov	r3, r1
 80020c4:	2900      	cmp	r1, #0
 80020c6:	d1f5      	bne.n	80020b4 <_printf_i+0x16c>
 80020c8:	e7b9      	b.n	800203e <_printf_i+0xf6>
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	6825      	ldr	r5, [r4, #0]
 80020ce:	6961      	ldr	r1, [r4, #20]
 80020d0:	1d18      	adds	r0, r3, #4
 80020d2:	6010      	str	r0, [r2, #0]
 80020d4:	0628      	lsls	r0, r5, #24
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	d501      	bpl.n	80020de <_printf_i+0x196>
 80020da:	6019      	str	r1, [r3, #0]
 80020dc:	e002      	b.n	80020e4 <_printf_i+0x19c>
 80020de:	066a      	lsls	r2, r5, #25
 80020e0:	d5fb      	bpl.n	80020da <_printf_i+0x192>
 80020e2:	8019      	strh	r1, [r3, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	6123      	str	r3, [r4, #16]
 80020e8:	4665      	mov	r5, ip
 80020ea:	e7b9      	b.n	8002060 <_printf_i+0x118>
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	1d19      	adds	r1, r3, #4
 80020f0:	6011      	str	r1, [r2, #0]
 80020f2:	681d      	ldr	r5, [r3, #0]
 80020f4:	6862      	ldr	r2, [r4, #4]
 80020f6:	2100      	movs	r1, #0
 80020f8:	4628      	mov	r0, r5
 80020fa:	f7fe f879 	bl	80001f0 <memchr>
 80020fe:	b108      	cbz	r0, 8002104 <_printf_i+0x1bc>
 8002100:	1b40      	subs	r0, r0, r5
 8002102:	6060      	str	r0, [r4, #4]
 8002104:	6863      	ldr	r3, [r4, #4]
 8002106:	6123      	str	r3, [r4, #16]
 8002108:	2300      	movs	r3, #0
 800210a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800210e:	e7a7      	b.n	8002060 <_printf_i+0x118>
 8002110:	6923      	ldr	r3, [r4, #16]
 8002112:	462a      	mov	r2, r5
 8002114:	4639      	mov	r1, r7
 8002116:	4630      	mov	r0, r6
 8002118:	47c0      	blx	r8
 800211a:	3001      	adds	r0, #1
 800211c:	d0aa      	beq.n	8002074 <_printf_i+0x12c>
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	079b      	lsls	r3, r3, #30
 8002122:	d413      	bmi.n	800214c <_printf_i+0x204>
 8002124:	68e0      	ldr	r0, [r4, #12]
 8002126:	9b03      	ldr	r3, [sp, #12]
 8002128:	4298      	cmp	r0, r3
 800212a:	bfb8      	it	lt
 800212c:	4618      	movlt	r0, r3
 800212e:	e7a3      	b.n	8002078 <_printf_i+0x130>
 8002130:	2301      	movs	r3, #1
 8002132:	464a      	mov	r2, r9
 8002134:	4639      	mov	r1, r7
 8002136:	4630      	mov	r0, r6
 8002138:	47c0      	blx	r8
 800213a:	3001      	adds	r0, #1
 800213c:	d09a      	beq.n	8002074 <_printf_i+0x12c>
 800213e:	3501      	adds	r5, #1
 8002140:	68e3      	ldr	r3, [r4, #12]
 8002142:	9a03      	ldr	r2, [sp, #12]
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	42ab      	cmp	r3, r5
 8002148:	dcf2      	bgt.n	8002130 <_printf_i+0x1e8>
 800214a:	e7eb      	b.n	8002124 <_printf_i+0x1dc>
 800214c:	2500      	movs	r5, #0
 800214e:	f104 0919 	add.w	r9, r4, #25
 8002152:	e7f5      	b.n	8002140 <_printf_i+0x1f8>
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ac      	bne.n	80020b2 <_printf_i+0x16a>
 8002158:	7803      	ldrb	r3, [r0, #0]
 800215a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800215e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002162:	e76c      	b.n	800203e <_printf_i+0xf6>
 8002164:	08002408 	.word	0x08002408
 8002168:	08002419 	.word	0x08002419

0800216c <memcpy>:
 800216c:	b510      	push	{r4, lr}
 800216e:	1e43      	subs	r3, r0, #1
 8002170:	440a      	add	r2, r1
 8002172:	4291      	cmp	r1, r2
 8002174:	d100      	bne.n	8002178 <memcpy+0xc>
 8002176:	bd10      	pop	{r4, pc}
 8002178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800217c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002180:	e7f7      	b.n	8002172 <memcpy+0x6>

08002182 <memmove>:
 8002182:	4288      	cmp	r0, r1
 8002184:	b510      	push	{r4, lr}
 8002186:	eb01 0302 	add.w	r3, r1, r2
 800218a:	d807      	bhi.n	800219c <memmove+0x1a>
 800218c:	1e42      	subs	r2, r0, #1
 800218e:	4299      	cmp	r1, r3
 8002190:	d00a      	beq.n	80021a8 <memmove+0x26>
 8002192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002196:	f802 4f01 	strb.w	r4, [r2, #1]!
 800219a:	e7f8      	b.n	800218e <memmove+0xc>
 800219c:	4283      	cmp	r3, r0
 800219e:	d9f5      	bls.n	800218c <memmove+0xa>
 80021a0:	1881      	adds	r1, r0, r2
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	42d3      	cmn	r3, r2
 80021a6:	d100      	bne.n	80021aa <memmove+0x28>
 80021a8:	bd10      	pop	{r4, pc}
 80021aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80021b2:	e7f7      	b.n	80021a4 <memmove+0x22>

080021b4 <_free_r>:
 80021b4:	b538      	push	{r3, r4, r5, lr}
 80021b6:	4605      	mov	r5, r0
 80021b8:	2900      	cmp	r1, #0
 80021ba:	d045      	beq.n	8002248 <_free_r+0x94>
 80021bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021c0:	1f0c      	subs	r4, r1, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bfb8      	it	lt
 80021c6:	18e4      	addlt	r4, r4, r3
 80021c8:	f000 f8d2 	bl	8002370 <__malloc_lock>
 80021cc:	4a1f      	ldr	r2, [pc, #124]	; (800224c <_free_r+0x98>)
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	4610      	mov	r0, r2
 80021d2:	b933      	cbnz	r3, 80021e2 <_free_r+0x2e>
 80021d4:	6063      	str	r3, [r4, #4]
 80021d6:	6014      	str	r4, [r2, #0]
 80021d8:	4628      	mov	r0, r5
 80021da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021de:	f000 b8c8 	b.w	8002372 <__malloc_unlock>
 80021e2:	42a3      	cmp	r3, r4
 80021e4:	d90c      	bls.n	8002200 <_free_r+0x4c>
 80021e6:	6821      	ldr	r1, [r4, #0]
 80021e8:	1862      	adds	r2, r4, r1
 80021ea:	4293      	cmp	r3, r2
 80021ec:	bf04      	itt	eq
 80021ee:	681a      	ldreq	r2, [r3, #0]
 80021f0:	685b      	ldreq	r3, [r3, #4]
 80021f2:	6063      	str	r3, [r4, #4]
 80021f4:	bf04      	itt	eq
 80021f6:	1852      	addeq	r2, r2, r1
 80021f8:	6022      	streq	r2, [r4, #0]
 80021fa:	6004      	str	r4, [r0, #0]
 80021fc:	e7ec      	b.n	80021d8 <_free_r+0x24>
 80021fe:	4613      	mov	r3, r2
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	b10a      	cbz	r2, 8002208 <_free_r+0x54>
 8002204:	42a2      	cmp	r2, r4
 8002206:	d9fa      	bls.n	80021fe <_free_r+0x4a>
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	1858      	adds	r0, r3, r1
 800220c:	42a0      	cmp	r0, r4
 800220e:	d10b      	bne.n	8002228 <_free_r+0x74>
 8002210:	6820      	ldr	r0, [r4, #0]
 8002212:	4401      	add	r1, r0
 8002214:	1858      	adds	r0, r3, r1
 8002216:	4282      	cmp	r2, r0
 8002218:	6019      	str	r1, [r3, #0]
 800221a:	d1dd      	bne.n	80021d8 <_free_r+0x24>
 800221c:	6810      	ldr	r0, [r2, #0]
 800221e:	6852      	ldr	r2, [r2, #4]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	4401      	add	r1, r0
 8002224:	6019      	str	r1, [r3, #0]
 8002226:	e7d7      	b.n	80021d8 <_free_r+0x24>
 8002228:	d902      	bls.n	8002230 <_free_r+0x7c>
 800222a:	230c      	movs	r3, #12
 800222c:	602b      	str	r3, [r5, #0]
 800222e:	e7d3      	b.n	80021d8 <_free_r+0x24>
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	1821      	adds	r1, r4, r0
 8002234:	428a      	cmp	r2, r1
 8002236:	bf04      	itt	eq
 8002238:	6811      	ldreq	r1, [r2, #0]
 800223a:	6852      	ldreq	r2, [r2, #4]
 800223c:	6062      	str	r2, [r4, #4]
 800223e:	bf04      	itt	eq
 8002240:	1809      	addeq	r1, r1, r0
 8002242:	6021      	streq	r1, [r4, #0]
 8002244:	605c      	str	r4, [r3, #4]
 8002246:	e7c7      	b.n	80021d8 <_free_r+0x24>
 8002248:	bd38      	pop	{r3, r4, r5, pc}
 800224a:	bf00      	nop
 800224c:	20000084 	.word	0x20000084

08002250 <_malloc_r>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	1ccd      	adds	r5, r1, #3
 8002254:	f025 0503 	bic.w	r5, r5, #3
 8002258:	3508      	adds	r5, #8
 800225a:	2d0c      	cmp	r5, #12
 800225c:	bf38      	it	cc
 800225e:	250c      	movcc	r5, #12
 8002260:	2d00      	cmp	r5, #0
 8002262:	4606      	mov	r6, r0
 8002264:	db01      	blt.n	800226a <_malloc_r+0x1a>
 8002266:	42a9      	cmp	r1, r5
 8002268:	d903      	bls.n	8002272 <_malloc_r+0x22>
 800226a:	230c      	movs	r3, #12
 800226c:	6033      	str	r3, [r6, #0]
 800226e:	2000      	movs	r0, #0
 8002270:	bd70      	pop	{r4, r5, r6, pc}
 8002272:	f000 f87d 	bl	8002370 <__malloc_lock>
 8002276:	4a21      	ldr	r2, [pc, #132]	; (80022fc <_malloc_r+0xac>)
 8002278:	6814      	ldr	r4, [r2, #0]
 800227a:	4621      	mov	r1, r4
 800227c:	b991      	cbnz	r1, 80022a4 <_malloc_r+0x54>
 800227e:	4c20      	ldr	r4, [pc, #128]	; (8002300 <_malloc_r+0xb0>)
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	b91b      	cbnz	r3, 800228c <_malloc_r+0x3c>
 8002284:	4630      	mov	r0, r6
 8002286:	f000 f863 	bl	8002350 <_sbrk_r>
 800228a:	6020      	str	r0, [r4, #0]
 800228c:	4629      	mov	r1, r5
 800228e:	4630      	mov	r0, r6
 8002290:	f000 f85e 	bl	8002350 <_sbrk_r>
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d124      	bne.n	80022e2 <_malloc_r+0x92>
 8002298:	230c      	movs	r3, #12
 800229a:	6033      	str	r3, [r6, #0]
 800229c:	4630      	mov	r0, r6
 800229e:	f000 f868 	bl	8002372 <__malloc_unlock>
 80022a2:	e7e4      	b.n	800226e <_malloc_r+0x1e>
 80022a4:	680b      	ldr	r3, [r1, #0]
 80022a6:	1b5b      	subs	r3, r3, r5
 80022a8:	d418      	bmi.n	80022dc <_malloc_r+0x8c>
 80022aa:	2b0b      	cmp	r3, #11
 80022ac:	d90f      	bls.n	80022ce <_malloc_r+0x7e>
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	50cd      	str	r5, [r1, r3]
 80022b2:	18cc      	adds	r4, r1, r3
 80022b4:	4630      	mov	r0, r6
 80022b6:	f000 f85c 	bl	8002372 <__malloc_unlock>
 80022ba:	f104 000b 	add.w	r0, r4, #11
 80022be:	1d23      	adds	r3, r4, #4
 80022c0:	f020 0007 	bic.w	r0, r0, #7
 80022c4:	1ac3      	subs	r3, r0, r3
 80022c6:	d0d3      	beq.n	8002270 <_malloc_r+0x20>
 80022c8:	425a      	negs	r2, r3
 80022ca:	50e2      	str	r2, [r4, r3]
 80022cc:	e7d0      	b.n	8002270 <_malloc_r+0x20>
 80022ce:	428c      	cmp	r4, r1
 80022d0:	684b      	ldr	r3, [r1, #4]
 80022d2:	bf16      	itet	ne
 80022d4:	6063      	strne	r3, [r4, #4]
 80022d6:	6013      	streq	r3, [r2, #0]
 80022d8:	460c      	movne	r4, r1
 80022da:	e7eb      	b.n	80022b4 <_malloc_r+0x64>
 80022dc:	460c      	mov	r4, r1
 80022de:	6849      	ldr	r1, [r1, #4]
 80022e0:	e7cc      	b.n	800227c <_malloc_r+0x2c>
 80022e2:	1cc4      	adds	r4, r0, #3
 80022e4:	f024 0403 	bic.w	r4, r4, #3
 80022e8:	42a0      	cmp	r0, r4
 80022ea:	d005      	beq.n	80022f8 <_malloc_r+0xa8>
 80022ec:	1a21      	subs	r1, r4, r0
 80022ee:	4630      	mov	r0, r6
 80022f0:	f000 f82e 	bl	8002350 <_sbrk_r>
 80022f4:	3001      	adds	r0, #1
 80022f6:	d0cf      	beq.n	8002298 <_malloc_r+0x48>
 80022f8:	6025      	str	r5, [r4, #0]
 80022fa:	e7db      	b.n	80022b4 <_malloc_r+0x64>
 80022fc:	20000084 	.word	0x20000084
 8002300:	20000088 	.word	0x20000088

08002304 <_realloc_r>:
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	4607      	mov	r7, r0
 8002308:	4614      	mov	r4, r2
 800230a:	460e      	mov	r6, r1
 800230c:	b921      	cbnz	r1, 8002318 <_realloc_r+0x14>
 800230e:	4611      	mov	r1, r2
 8002310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002314:	f7ff bf9c 	b.w	8002250 <_malloc_r>
 8002318:	b922      	cbnz	r2, 8002324 <_realloc_r+0x20>
 800231a:	f7ff ff4b 	bl	80021b4 <_free_r>
 800231e:	4625      	mov	r5, r4
 8002320:	4628      	mov	r0, r5
 8002322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002324:	f000 f826 	bl	8002374 <_malloc_usable_size_r>
 8002328:	42a0      	cmp	r0, r4
 800232a:	d20f      	bcs.n	800234c <_realloc_r+0x48>
 800232c:	4621      	mov	r1, r4
 800232e:	4638      	mov	r0, r7
 8002330:	f7ff ff8e 	bl	8002250 <_malloc_r>
 8002334:	4605      	mov	r5, r0
 8002336:	2800      	cmp	r0, #0
 8002338:	d0f2      	beq.n	8002320 <_realloc_r+0x1c>
 800233a:	4631      	mov	r1, r6
 800233c:	4622      	mov	r2, r4
 800233e:	f7ff ff15 	bl	800216c <memcpy>
 8002342:	4631      	mov	r1, r6
 8002344:	4638      	mov	r0, r7
 8002346:	f7ff ff35 	bl	80021b4 <_free_r>
 800234a:	e7e9      	b.n	8002320 <_realloc_r+0x1c>
 800234c:	4635      	mov	r5, r6
 800234e:	e7e7      	b.n	8002320 <_realloc_r+0x1c>

08002350 <_sbrk_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4c06      	ldr	r4, [pc, #24]	; (800236c <_sbrk_r+0x1c>)
 8002354:	2300      	movs	r3, #0
 8002356:	4605      	mov	r5, r0
 8002358:	4608      	mov	r0, r1
 800235a:	6023      	str	r3, [r4, #0]
 800235c:	f000 f812 	bl	8002384 <_sbrk>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d102      	bne.n	800236a <_sbrk_r+0x1a>
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	b103      	cbz	r3, 800236a <_sbrk_r+0x1a>
 8002368:	602b      	str	r3, [r5, #0]
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	20000194 	.word	0x20000194

08002370 <__malloc_lock>:
 8002370:	4770      	bx	lr

08002372 <__malloc_unlock>:
 8002372:	4770      	bx	lr

08002374 <_malloc_usable_size_r>:
 8002374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002378:	1f18      	subs	r0, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	bfbc      	itt	lt
 800237e:	580b      	ldrlt	r3, [r1, r0]
 8002380:	18c0      	addlt	r0, r0, r3
 8002382:	4770      	bx	lr

08002384 <_sbrk>:
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <_sbrk+0x14>)
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	4602      	mov	r2, r0
 800238a:	b909      	cbnz	r1, 8002390 <_sbrk+0xc>
 800238c:	4903      	ldr	r1, [pc, #12]	; (800239c <_sbrk+0x18>)
 800238e:	6019      	str	r1, [r3, #0]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	4402      	add	r2, r0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	4770      	bx	lr
 8002398:	2000008c 	.word	0x2000008c
 800239c:	20000198 	.word	0x20000198

080023a0 <_init>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr

080023ac <_fini>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr
